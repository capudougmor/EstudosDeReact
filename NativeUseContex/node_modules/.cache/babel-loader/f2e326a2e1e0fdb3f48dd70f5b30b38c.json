{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { Animated, View, Platform } from 'react-native';\nlet Screens;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {} // Ignore\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\n\n\nclass WebScreen extends React.Component {\n  render() {\n    const _this$props = this.props,\n          active = _this$props.active,\n          style = _this$props.style,\n          rest = _objectWithoutProperties(_this$props, [\"active\", \"style\"]);\n\n    return /*#__PURE__*/React.createElement(View // @ts-expect-error: hidden exists on web, but not in React Native\n    , _extends({\n      hidden: !active,\n      style: [style, {\n        display: active ? 'flex' : 'none'\n      }]\n    }, rest));\n  }\n\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\nexport const MaybeScreenContainer = _ref => {\n  let enabled = _ref.enabled,\n      rest = _objectWithoutProperties(_ref, [\"enabled\"]);\n\n  if (enabled && Platform.OS !== 'web' && Screens && Screens.screensEnabled()) {\n    return /*#__PURE__*/React.createElement(Screens.ScreenContainer, rest);\n  }\n\n  return /*#__PURE__*/React.createElement(View, rest);\n};\nexport const MaybeScreen = _ref2 => {\n  let enabled = _ref2.enabled,\n      active = _ref2.active,\n      rest = _objectWithoutProperties(_ref2, [\"enabled\", \"active\"]);\n\n  if (enabled && Platform.OS === 'web') {\n    // @ts-expect-error: the Animated.createAnimatedComponent types don't work properly\n    return /*#__PURE__*/React.createElement(AnimatedWebScreen, _extends({\n      active: active\n    }, rest));\n  }\n\n  if (enabled && Screens && Screens.screensEnabled()) {\n    // @ts-expect-error: stackPresentation is incorrectly marked as required\n    return /*#__PURE__*/React.createElement(Screens.Screen, _extends({\n      active: active\n    }, rest));\n  }\n\n  return /*#__PURE__*/React.createElement(View, rest);\n};","map":{"version":3,"sources":["Screens.tsx"],"names":["Screens","require","React","render","style","display","active","AnimatedWebScreen","Animated","MaybeScreenContainer","enabled","rest","Platform","MaybeScreen"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AACA,SAAA,QAAA,EAAA,IAAA,EAAA,QAAA,QAAA,cAAA;AAEA,IAAA,OAAA;;AAEA,IAAI;AACFA,EAAAA,OAAO,GAAGC,OAAO,CAAjBD,sBAAiB,CAAjBA;AADF,CAAA,CAEE,OAAA,CAAA,EAAU,CAAV,C,CACA;AAGF;AACA;AACA;;;AACA,MAAA,SAAA,SAAwBE,KAAK,CAA7B,SAAA,CAKE;AACAC,EAAAA,MAAM,GAAG;AACP,UAAA,WAAA,GAAmC,KAAnC,KAAA;AAAA,UAAM,MAAN,GAAA,WAAA,CAAM,MAAN;AAAA,UAAgBC,KAAhB,GAAA,WAAA,CAAgBA,KAAhB;AAAA,UAAA,IAAA,GAAA,wBAAA,CAAA,WAAA,EAAA,CAAA,QAAA,EAAA,OAAA,CAAA,CAAA;;AAEA,WAAA,aACE,KAAA,CAAA,aAAA,CAAA,IAAA,CACE;AADF,MAAA,QAAA,CAAA;AAEE,MAAA,MAAM,EAAE,CAFV,MAAA;AAGE,MAAA,KAAK,EAAE,CAAA,KAAA,EAAQ;AAAEC,QAAAA,OAAO,EAAEC,MAAM,GAAA,MAAA,GAAY;AAA7B,OAAR;AAHT,KAAA,EADF,IACE,CAAA,CADF;AAQD;;AAZD;;AAeF,MAAMC,iBAAiB,GAAGC,QAAQ,CAARA,uBAAAA,CAA1B,SAA0BA,CAA1B;AAEA,OAAO,MAAMC,oBAAoB,GAAG,IAAA,IAM9B;AAN+B,MACnCC,OADmC,GAM/B,IAN+B,CACnCA,OADmC;AAAA,MAEhCC,IAFgC,GAM/B,wBAAA,CAAA,IAAA,EAAA,CAAA,SAAA,CAAA,CAN+B;;AAOnC,MAAID,OAAO,IAAIE,QAAQ,CAARA,EAAAA,KAAXF,KAAAA,IAAAA,OAAAA,IAA+CV,OAAO,CAA1D,cAAmDA,EAAnD,EAA6E;AAC3E,WAAA,aAAO,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,eAAA,EAAP,IAAO,CAAP;AACD;;AAED,SAAA,aAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAP,IAAO,CAAP;AAXK,CAAA;AAcP,OAAO,MAAMa,WAAW,GAAG,KAAA,IAQrB;AAAA,MARsB,OAQtB,GAAA,KAAA,CARsB,OAQtB;AAAA,MANJP,MAMI,GAAA,KAAA,CANJA,MAMI;AAAA,MALDK,IAKC,GAAA,wBAAA,CAAA,KAAA,EAAA,CAAA,SAAA,EAAA,QAAA,CAAA,CAAA;;AACJ,MAAID,OAAO,IAAIE,QAAQ,CAARA,EAAAA,KAAf,KAAA,EAAsC;AACpC;AACA,WAAA,aAAO,KAAA,CAAA,aAAA,CAAA,iBAAA,EAAA,QAAA,CAAA;AAAmB,MAAA,MAAM,EAAEN;AAA3B,KAAA,EAAP,IAAO,CAAA,CAAP;AACD;;AAED,MAAII,OAAO,IAAPA,OAAAA,IAAsBV,OAAO,CAAjC,cAA0BA,EAA1B,EAAoD;AAClD;AACA,WAAA,aAAO,KAAA,CAAA,aAAA,CAAC,OAAD,CAAA,MAAA,EAAA,QAAA,CAAA;AAAgB,MAAA,MAAM,EAAEM;AAAxB,KAAA,EAAP,IAAO,CAAA,CAAP;AACD;;AAED,SAAA,aAAO,KAAA,CAAA,aAAA,CAAA,IAAA,EAAP,IAAO,CAAP;AAnBK,CAAA","sourcesContent":["import * as React from 'react';\nimport { Animated, View, Platform, ViewProps } from 'react-native';\n\nlet Screens: typeof import('react-native-screens') | undefined;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {\n  // Ignore\n}\n\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\nclass WebScreen extends React.Component<\n  ViewProps & {\n    active: number;\n    children: React.ReactNode;\n  }\n> {\n  render() {\n    const { active, style, ...rest } = this.props;\n\n    return (\n      <View\n        // @ts-expect-error: hidden exists on web, but not in React Native\n        hidden={!active}\n        style={[style, { display: active ? 'flex' : 'none' }]}\n        {...rest}\n      />\n    );\n  }\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\n\nexport const MaybeScreenContainer = ({\n  enabled,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS !== 'web' && Screens && Screens.screensEnabled()) {\n    return <Screens.ScreenContainer {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n\nexport const MaybeScreen = ({\n  enabled,\n  active,\n  ...rest\n}: ViewProps & {\n  enabled: boolean;\n  active: 0 | 1 | Animated.AnimatedInterpolation;\n  children: React.ReactNode;\n}) => {\n  if (enabled && Platform.OS === 'web') {\n    // @ts-expect-error: the Animated.createAnimatedComponent types don't work properly\n    return <AnimatedWebScreen active={active} {...rest} />;\n  }\n\n  if (enabled && Screens && Screens.screensEnabled()) {\n    // @ts-expect-error: stackPresentation is incorrectly marked as required\n    return <Screens.Screen active={active} {...rest} />;\n  }\n\n  return <View {...rest} />;\n};\n"]},"metadata":{},"sourceType":"module"}