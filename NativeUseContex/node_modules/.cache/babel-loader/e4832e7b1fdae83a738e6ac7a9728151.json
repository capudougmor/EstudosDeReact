{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { Platform } from 'react-native';\nimport { useNavigationBuilder, createNavigatorFactory, StackRouter, StackActions } from '@react-navigation/native';\nimport StackView from '../views/Stack/StackView';\n\nfunction StackNavigator(_ref) {\n  let initialRouteName = _ref.initialRouteName,\n      children = _ref.children,\n      screenOptions = _ref.screenOptions,\n      rest = _objectWithoutProperties(_ref, [\"initialRouteName\", \"children\", \"screenOptions\"]);\n\n  const defaultOptions = {\n    gestureEnabled: Platform.OS === 'ios',\n    animationEnabled: Platform.OS !== 'web'\n  };\n\n  const _useNavigationBuilder = useNavigationBuilder(StackRouter, {\n    initialRouteName,\n    children,\n    screenOptions: typeof screenOptions === 'function' ? (...args) => _objectSpread(_objectSpread({}, defaultOptions), screenOptions(...args)) : _objectSpread(_objectSpread({}, defaultOptions), screenOptions)\n  }),\n        state = _useNavigationBuilder.state,\n        descriptors = _useNavigationBuilder.descriptors,\n        navigation = _useNavigationBuilder.navigation;\n\n  React.useEffect(() => navigation.addListener && navigation.addListener('tabPress', e => {\n    const isFocused = navigation.isFocused(); // Run the operation in the next frame so we're sure all listeners have been run\n    // This is necessary to know if preventDefault() has been called\n\n    requestAnimationFrame(() => {\n      if (state.index > 0 && isFocused && !e.defaultPrevented) {\n        // When user taps on already focused tab and we're inside the tab,\n        // reset the stack to replicate native behaviour\n        navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.popToTop()), {}, {\n          target: state.key\n        }));\n      }\n    });\n  }), [navigation, state.index, state.key]);\n  return /*#__PURE__*/React.createElement(StackView, _extends({}, rest, {\n    state: state,\n    descriptors: descriptors,\n    navigation: navigation\n  }));\n}\n\nexport default createNavigatorFactory(StackNavigator);","map":null,"metadata":{},"sourceType":"module"}