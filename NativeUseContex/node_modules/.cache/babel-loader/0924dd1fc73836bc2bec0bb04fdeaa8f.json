{"ast":null,"code":"import _slicedToArray from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as React from 'react';\nimport { getStateFromPath as getStateFromPathDefault, getPathFromState as getPathFromStateDefault, getActionFromState } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\nimport ServerContext from './ServerContext';\n\nconst createMemoryHistory = () => {\n  let index = 0;\n  let items = []; // Whether there's a `history.go(n)` pending\n\n  let pending = false;\n  const history = {\n    get index() {\n      var _window$history$state; // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n\n\n      const id = (_window$history$state = window.history.state) === null || _window$history$state === void 0 ? void 0 : _window$history$state.id;\n\n      if (id) {\n        const index = items.findIndex(item => item.id === id);\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index) {\n      return items[index];\n    },\n\n    backIndex({\n      path\n    }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({\n      path,\n      state\n    }) {\n      const id = nanoid(); // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n\n      items = items.slice(0, index + 1);\n      items.push({\n        path,\n        state,\n        id\n      });\n      index = items.length - 1; // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n\n      window.history.pushState({\n        id\n      }, '', path);\n    },\n\n    replace({\n      path,\n      state\n    }) {\n      var _window$history$state2, _window$history$state3;\n\n      const id = (_window$history$state2 = (_window$history$state3 = window.history.state) === null || _window$history$state3 === void 0 ? void 0 : _window$history$state3.id) !== null && _window$history$state2 !== void 0 ? _window$history$state2 : nanoid();\n\n      if (items.length) {\n        items[index] = {\n          path,\n          state,\n          id\n        };\n      } else {\n        // This is the first time any state modifications are done\n        // So we need to push the entry as there's nothing to replace\n        items.push({\n          path,\n          state,\n          id\n        });\n      }\n\n      window.history.replaceState({\n        id\n      }, '', path);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n) {\n      if (n > 0) {\n        // We shouldn't go forward more than available index\n        n = Math.min(n, items.length - 1);\n      } else if (n < 0) {\n        // We shouldn't go back more than the index\n        // Otherwise we'll exit the page\n        n = Math.max(n, -Math.max(index + 1, 1));\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      index += n;\n      return new Promise(resolve => {\n        pending = true;\n\n        const done = () => {\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const title = window.document.title;\n          window.document.title = '';\n          window.document.title = title;\n          pending = false;\n          window.removeEventListener('popstate', done);\n          resolve();\n        }; // Resolve the promise in the next frame\n        // If `popstate` hasn't fired by then, then it wasn't handled\n\n\n        requestAnimationFrame(() => requestAnimationFrame(done));\n        window.addEventListener('popstate', done);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener) {\n      const onPopState = () => {\n        if (pending) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n      return () => window.removeEventListener('popstate', onPopState);\n    }\n\n  };\n  return history;\n};\n/**\n * Find the matching navigation state that changed between 2 navigation states\n * e.g.: a -> b -> c -> d and a -> b -> c -> e -> f, if history in b changed, b is the matching state\n */\n\n\nconst findMatchingState = (a, b) => {\n  if (a === undefined || b === undefined || a.key !== b.key) {\n    return [undefined, undefined];\n  } // Tab and drawer will have `history` property, but stack will have history in `routes`\n\n\n  const aHistoryLength = a.history ? a.history.length : a.routes.length;\n  const bHistoryLength = b.history ? b.history.length : b.routes.length;\n  const aRoute = a.routes[a.index];\n  const bRoute = b.routes[b.index];\n  const aChildState = aRoute.state;\n  const bChildState = bRoute.state; // Stop here if this is the state object that changed:\n  // - history length is different\n  // - focused routes are different\n  // - one of them doesn't have child state\n  // - child state keys are different\n\n  if (aHistoryLength !== bHistoryLength || aRoute.key !== bRoute.key || aChildState === undefined || bChildState === undefined || aChildState.key !== bChildState.key) {\n    return [a, b];\n  }\n\n  return findMatchingState(aChildState, bChildState);\n};\n/**\n * Run async function in series as it's called.\n */\n\n\nconst series = cb => {\n  // Whether we're currently handling a callback\n  let handling = false;\n  let queue = [];\n\n  const callback = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var last;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n\n            if (!handling) {\n              _context.next = 4;\n              break;\n            }\n\n            // If we're currently handling a previous event, wait before handling this one\n            // Add the callback to the beginning of the queue\n            queue.unshift(callback);\n            return _context.abrupt(\"return\");\n\n          case 4:\n            handling = true;\n            _context.next = 7;\n            return cb();\n\n          case 7:\n            _context.prev = 7;\n            handling = false;\n\n            if (queue.length) {\n              // If we have queued items, handle the last one\n              last = queue.pop();\n              last === null || last === void 0 ? void 0 : last();\n            }\n\n            return _context.finish(7);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee, null, [[0,, 7, 11]]);\n    }));\n\n    return function callback() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  return callback;\n};\n\nlet isUsingLinking = false;\nexport default function useLinking(ref, {\n  enabled = true,\n  config,\n  getStateFromPath = getStateFromPathDefault,\n  getPathFromState = getPathFromStateDefault\n}) {\n  React.useEffect(() => {\n    if (enabled !== false && isUsingLinking) {\n      throw new Error(['Looks like you have configured linking in multiple places. This is likely an error since URL integration should only be handled in one place to avoid conflicts. Make sure that:', \"- You are not using both 'linking' prop and 'useLinking'\", \"- You don't have 'useLinking' in multiple components\"].join('\\n').trim());\n    } else {\n      isUsingLinking = enabled !== false;\n    }\n\n    return () => {\n      isUsingLinking = false;\n    };\n  });\n\n  const _React$useState = React.useState(createMemoryHistory),\n        _React$useState2 = _slicedToArray(_React$useState, 1),\n        history = _React$useState2[0]; // We store these options in ref to avoid re-creating getInitialState and re-subscribing listeners\n  // This lets user avoid wrapping the items in `React.useCallback` or `React.useMemo`\n  // Not re-creating `getInitialState` is important coz it makes it easier for the user to use in an effect\n\n\n  const enabledRef = React.useRef(enabled);\n  const configRef = React.useRef(config);\n  const getStateFromPathRef = React.useRef(getStateFromPath);\n  const getPathFromStateRef = React.useRef(getPathFromState);\n  React.useEffect(() => {\n    enabledRef.current = enabled;\n    configRef.current = config;\n    getStateFromPathRef.current = getStateFromPath;\n    getPathFromStateRef.current = getPathFromState;\n  }, [config, enabled, getPathFromState, getStateFromPath]);\n  const server = React.useContext(ServerContext);\n  const getInitialState = React.useCallback(() => {\n    let value;\n\n    if (enabledRef.current) {\n      var _server$location;\n\n      const location = (_server$location = server === null || server === void 0 ? void 0 : server.location) !== null && _server$location !== void 0 ? _server$location : typeof window !== 'undefined' ? window.location : undefined;\n      const path = location ? location.pathname + location.search : undefined;\n\n      if (path) {\n        value = getStateFromPathRef.current(path, configRef.current);\n      }\n    } // Make it a thenable to keep consistent with the native impl\n\n\n    const thenable = {\n      then(onfulfilled) {\n        return Promise.resolve(onfulfilled ? onfulfilled(value) : value);\n      },\n\n      catch() {\n        return thenable;\n      }\n\n    };\n    return thenable; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const previousIndexRef = React.useRef(undefined);\n  const previousStateRef = React.useRef(undefined);\n  const pendingPopStatePathRef = React.useRef(undefined);\n  React.useEffect(() => {\n    previousIndexRef.current = history.index;\n    return history.listen(() => {\n      var _previousIndexRef$cur;\n\n      const navigation = ref.current;\n\n      if (!navigation || !enabled) {\n        return;\n      }\n\n      const path = location.pathname + location.search;\n      const index = history.index;\n      const previousIndex = (_previousIndexRef$cur = previousIndexRef.current) !== null && _previousIndexRef$cur !== void 0 ? _previousIndexRef$cur : 0;\n      previousIndexRef.current = index;\n      pendingPopStatePathRef.current = path; // When browser back/forward is clicked, we first need to check if state object for this index exists\n      // If it does we'll reset to that state object\n      // Otherwise, we'll handle it like a regular deep link\n\n      const record = history.get(index);\n\n      if ((record === null || record === void 0 ? void 0 : record.path) === path && (record === null || record === void 0 ? void 0 : record.state)) {\n        navigation.resetRoot(record.state);\n        return;\n      }\n\n      const state = getStateFromPathRef.current(path, configRef.current); // We should only dispatch an action when going forward\n      // Otherwise the action will likely add items to history, which would mess things up\n\n      if (state && index > previousIndex) {\n        const action = getActionFromState(state);\n\n        if (action !== undefined) {\n          navigation.dispatch(action);\n        } else {\n          navigation.resetRoot(state);\n        }\n      } else {\n        // if current path didn't return any state, we should revert to initial state\n        navigation.resetRoot(state);\n      }\n    });\n  }, [enabled, history, ref]);\n  React.useEffect(() => {\n    var _ref$current;\n\n    if (!enabled) {\n      return;\n    }\n\n    if (ref.current) {\n      // We need to record the current metadata on the first render if they aren't set\n      // This will allow the initial state to be in the history entry\n      const state = ref.current.getRootState();\n      const path = getPathFromStateRef.current(state, configRef.current);\n\n      if (previousStateRef.current === undefined) {\n        previousStateRef.current = state;\n      }\n\n      history.replace({\n        path,\n        state\n      });\n    }\n\n    const onStateChange = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var navigation, previousState, state, pendingPath, path, _findMatchingState, _findMatchingState2, previousFocusedState, focusedState, historyDelta, nextIndex, currentIndex;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              navigation = ref.current;\n\n              if (!(!navigation || !enabled)) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\");\n\n            case 3:\n              previousState = previousStateRef.current;\n              state = navigation.getRootState();\n              pendingPath = pendingPopStatePathRef.current;\n              path = getPathFromStateRef.current(state, configRef.current);\n              previousStateRef.current = state;\n              pendingPopStatePathRef.current = undefined; // To detect the kind of state change, we need to:\n              // - Find the common focused navigation state in previous and current state\n              // - If only the route keys changed, compare history/routes.length to check if we go back/forward/replace\n              // - If no common focused navigation state found, it's a replace\n\n              _findMatchingState = findMatchingState(previousState, state), _findMatchingState2 = _slicedToArray(_findMatchingState, 2), previousFocusedState = _findMatchingState2[0], focusedState = _findMatchingState2[1];\n\n              if (!(previousFocusedState && focusedState && // We should only handle push/pop if path changed from what was in last `popstate`\n              // Otherwise it's likely a change triggered by `popstate`\n              path !== pendingPath)) {\n                _context2.next = 32;\n                break;\n              }\n\n              historyDelta = (focusedState.history ? focusedState.history.length : focusedState.routes.length) - (previousFocusedState.history ? previousFocusedState.history.length : previousFocusedState.routes.length);\n\n              if (!(historyDelta > 0)) {\n                _context2.next = 16;\n                break;\n              }\n\n              // If history length is increased, we should pushState\n              // Note that path might not actually change here, for example, drawer open should pushState\n              history.push({\n                path,\n                state\n              });\n              _context2.next = 30;\n              break;\n\n            case 16:\n              if (!(historyDelta < 0)) {\n                _context2.next = 29;\n                break;\n              }\n\n              // If history length is decreased, i.e. entries were removed, we want to go back\n              nextIndex = history.backIndex({\n                path\n              });\n              currentIndex = history.index;\n\n              if (!(nextIndex !== -1 && nextIndex < currentIndex)) {\n                _context2.next = 24;\n                break;\n              }\n\n              _context2.next = 22;\n              return history.go(nextIndex - currentIndex);\n\n            case 22:\n              _context2.next = 26;\n              break;\n\n            case 24:\n              _context2.next = 26;\n              return history.go(historyDelta);\n\n            case 26:\n              // Store the updated state as well as fix the path if incorrect\n              history.replace({\n                path,\n                state\n              });\n              _context2.next = 30;\n              break;\n\n            case 29:\n              // If history length is unchanged, we want to replaceState\n              history.replace({\n                path,\n                state\n              });\n\n            case 30:\n              _context2.next = 33;\n              break;\n\n            case 32:\n              // If no common navigation state was found, assume it's a replace\n              // This would happen if the user did a reset/conditionally changed navigators\n              history.replace({\n                path,\n                state\n              });\n\n            case 33:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2);\n      }));\n\n      return function onStateChange() {\n        return _ref2.apply(this, arguments);\n      };\n    }(); // We debounce onStateChange coz we don't want multiple state changes to be handled at one time\n    // This could happen since `history.go(n)` is asynchronous\n    // If `pushState` or `replaceState` were called before `history.go(n)` completes, it'll mess stuff up\n\n\n    return (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.addListener('state', series(onStateChange));\n  });\n  return {\n    getInitialState\n  };\n}","map":null,"metadata":{},"sourceType":"module"}