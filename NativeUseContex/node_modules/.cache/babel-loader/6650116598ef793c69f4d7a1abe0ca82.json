{"ast":null,"code":"function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { Animated, View, StyleSheet, Platform } from 'react-native';\nimport HeaderBackButton from './HeaderBackButton';\nimport HeaderBackground from './HeaderBackground';\nimport memoize from '../../utils/memoize';\n\nconst warnIfHeaderStylesDefined = styles => {\n  Object.keys(styles).forEach(styleProp => {\n    const value = styles[styleProp];\n\n    if (styleProp === 'position' && value === 'absolute') {\n      console.warn(\"position: 'absolute' is not supported on headerStyle. If you would like to render content under the header, use the 'headerTransparent' navigationOption.\");\n    } else if (value !== undefined) {\n      console.warn(\"\".concat(styleProp, \" was given a value of \").concat(value, \", this has no effect on headerStyle.\"));\n    }\n  });\n};\n\nexport const getDefaultHeaderHeight = (layout, statusBarHeight) => {\n  const isLandscape = layout.width > layout.height;\n  let headerHeight;\n\n  if (Platform.OS === 'ios') {\n    if (isLandscape && !Platform.isPad) {\n      headerHeight = 32;\n    } else {\n      headerHeight = 44;\n    }\n  } else if (Platform.OS === 'android') {\n    headerHeight = 56;\n  } else {\n    headerHeight = 64;\n  }\n\n  return headerHeight + statusBarHeight;\n};\nexport default class HeaderSegment extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {});\n\n    _defineProperty(this, \"handleTitleLayout\", e => {\n      const _e$nativeEvent$layout = e.nativeEvent.layout,\n            height = _e$nativeEvent$layout.height,\n            width = _e$nativeEvent$layout.width;\n      this.setState(({\n        titleLayout\n      }) => {\n        if (titleLayout && height === titleLayout.height && width === titleLayout.width) {\n          return null;\n        }\n\n        return {\n          titleLayout: {\n            height,\n            width\n          }\n        };\n      });\n    });\n\n    _defineProperty(this, \"handleLeftLabelLayout\", e => {\n      const _e$nativeEvent$layout2 = e.nativeEvent.layout,\n            height = _e$nativeEvent$layout2.height,\n            width = _e$nativeEvent$layout2.width;\n      const leftLabelLayout = this.state.leftLabelLayout;\n\n      if (leftLabelLayout && height === leftLabelLayout.height && width === leftLabelLayout.width) {\n        return;\n      }\n\n      this.setState({\n        leftLabelLayout: {\n          height,\n          width\n        }\n      });\n    });\n\n    _defineProperty(this, \"getInterpolatedStyle\", memoize((styleInterpolator, layout, current, next, titleLayout, leftLabelLayout, headerHeight) => styleInterpolator({\n      current: {\n        progress: current\n      },\n      next: next && {\n        progress: next\n      },\n      layouts: {\n        header: {\n          height: headerHeight,\n          width: layout.width\n        },\n        screen: layout,\n        title: titleLayout,\n        leftLabel: leftLabelLayout\n      }\n    })));\n  }\n\n  render() {\n    const _this$props = this.props,\n          scene = _this$props.scene,\n          layout = _this$props.layout,\n          insets = _this$props.insets,\n          currentTitle = _this$props.title,\n          previousTitle = _this$props.leftLabel,\n          onGoBack = _this$props.onGoBack,\n          headerTitle = _this$props.headerTitle,\n          _this$props$headerTit = _this$props.headerTitleAlign,\n          headerTitleAlign = _this$props$headerTit === void 0 ? Platform.select({\n      ios: 'center',\n      default: 'left'\n    }) : _this$props$headerTit,\n          _this$props$headerLef = _this$props.headerLeft,\n          left = _this$props$headerLef === void 0 ? onGoBack ? props => /*#__PURE__*/React.createElement(HeaderBackButton, props) : undefined : _this$props$headerLef,\n          headerTransparent = _this$props.headerTransparent,\n          headerTintColor = _this$props.headerTintColor,\n          headerBackground = _this$props.headerBackground,\n          right = _this$props.headerRight,\n          backImage = _this$props.headerBackImage,\n          leftLabel = _this$props.headerBackTitle,\n          headerBackTitleVisible = _this$props.headerBackTitleVisible,\n          truncatedLabel = _this$props.headerTruncatedBackTitle,\n          pressColorAndroid = _this$props.headerPressColorAndroid,\n          backAllowFontScaling = _this$props.headerBackAllowFontScaling,\n          titleAllowFontScaling = _this$props.headerTitleAllowFontScaling,\n          customTitleStyle = _this$props.headerTitleStyle,\n          customLeftLabelStyle = _this$props.headerBackTitleStyle,\n          leftContainerStyle = _this$props.headerLeftContainerStyle,\n          rightContainerStyle = _this$props.headerRightContainerStyle,\n          titleContainerStyle = _this$props.headerTitleContainerStyle,\n          customHeaderStyle = _this$props.headerStyle,\n          _this$props$headerSta = _this$props.headerStatusBarHeight,\n          headerStatusBarHeight = _this$props$headerSta === void 0 ? insets.top : _this$props$headerSta,\n          styleInterpolator = _this$props.styleInterpolator;\n    const _this$state = this.state,\n          leftLabelLayout = _this$state.leftLabelLayout,\n          titleLayout = _this$state.titleLayout;\n    const defaultHeight = getDefaultHeaderHeight(layout, headerStatusBarHeight);\n\n    const _ref = StyleSheet.flatten(customHeaderStyle || {}),\n          _ref$height = _ref.height,\n          height = _ref$height === void 0 ? defaultHeight : _ref$height,\n          minHeight = _ref.minHeight,\n          maxHeight = _ref.maxHeight,\n          backgroundColor = _ref.backgroundColor,\n          borderBottomColor = _ref.borderBottomColor,\n          borderBottomEndRadius = _ref.borderBottomEndRadius,\n          borderBottomLeftRadius = _ref.borderBottomLeftRadius,\n          borderBottomRightRadius = _ref.borderBottomRightRadius,\n          borderBottomStartRadius = _ref.borderBottomStartRadius,\n          borderBottomWidth = _ref.borderBottomWidth,\n          borderColor = _ref.borderColor,\n          borderEndColor = _ref.borderEndColor,\n          borderEndWidth = _ref.borderEndWidth,\n          borderLeftColor = _ref.borderLeftColor,\n          borderLeftWidth = _ref.borderLeftWidth,\n          borderRadius = _ref.borderRadius,\n          borderRightColor = _ref.borderRightColor,\n          borderRightWidth = _ref.borderRightWidth,\n          borderStartColor = _ref.borderStartColor,\n          borderStartWidth = _ref.borderStartWidth,\n          borderStyle = _ref.borderStyle,\n          borderTopColor = _ref.borderTopColor,\n          borderTopEndRadius = _ref.borderTopEndRadius,\n          borderTopLeftRadius = _ref.borderTopLeftRadius,\n          borderTopRightRadius = _ref.borderTopRightRadius,\n          borderTopStartRadius = _ref.borderTopStartRadius,\n          borderTopWidth = _ref.borderTopWidth,\n          borderWidth = _ref.borderWidth,\n          boxShadow = _ref.boxShadow,\n          elevation = _ref.elevation,\n          shadowColor = _ref.shadowColor,\n          shadowOffset = _ref.shadowOffset,\n          shadowOpacity = _ref.shadowOpacity,\n          shadowRadius = _ref.shadowRadius,\n          opacity = _ref.opacity,\n          transform = _ref.transform,\n          unsafeStyles = _objectWithoutProperties(_ref, [\"height\", \"minHeight\", \"maxHeight\", \"backgroundColor\", \"borderBottomColor\", \"borderBottomEndRadius\", \"borderBottomLeftRadius\", \"borderBottomRightRadius\", \"borderBottomStartRadius\", \"borderBottomWidth\", \"borderColor\", \"borderEndColor\", \"borderEndWidth\", \"borderLeftColor\", \"borderLeftWidth\", \"borderRadius\", \"borderRightColor\", \"borderRightWidth\", \"borderStartColor\", \"borderStartWidth\", \"borderStyle\", \"borderTopColor\", \"borderTopEndRadius\", \"borderTopLeftRadius\", \"borderTopRightRadius\", \"borderTopStartRadius\", \"borderTopWidth\", \"borderWidth\", \"boxShadow\", \"elevation\", \"shadowColor\", \"shadowOffset\", \"shadowOpacity\", \"shadowRadius\", \"opacity\", \"transform\"]);\n\n    if (process.env.NODE_ENV !== 'production') {\n      warnIfHeaderStylesDefined(unsafeStyles);\n    }\n\n    const safeStyles = {\n      backgroundColor,\n      borderBottomColor,\n      borderBottomEndRadius,\n      borderBottomLeftRadius,\n      borderBottomRightRadius,\n      borderBottomStartRadius,\n      borderBottomWidth,\n      borderColor,\n      borderEndColor,\n      borderEndWidth,\n      borderLeftColor,\n      borderLeftWidth,\n      borderRadius,\n      borderRightColor,\n      borderRightWidth,\n      borderStartColor,\n      borderStartWidth,\n      borderStyle,\n      borderTopColor,\n      borderTopEndRadius,\n      borderTopLeftRadius,\n      borderTopRightRadius,\n      borderTopStartRadius,\n      borderTopWidth,\n      borderWidth,\n      boxShadow,\n      elevation,\n      shadowColor,\n      shadowOffset,\n      shadowOpacity,\n      shadowRadius,\n      opacity,\n      transform\n    }; // Setting a property to undefined triggers default style\n    // So we need to filter them out\n    // Users can use `null` instead\n\n    for (const styleProp in safeStyles) {\n      // @ts-expect-error: typescript wrongly complains that styleProp cannot be used to index safeStyles\n      if (safeStyles[styleProp] === undefined) {\n        // @ts-expect-error\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete safeStyles[styleProp];\n      }\n    }\n\n    const _this$getInterpolated = this.getInterpolatedStyle(styleInterpolator, layout, scene.progress.current, scene.progress.next, titleLayout, previousTitle ? leftLabelLayout : undefined, typeof height === 'number' ? height : defaultHeight),\n          titleStyle = _this$getInterpolated.titleStyle,\n          leftButtonStyle = _this$getInterpolated.leftButtonStyle,\n          leftLabelStyle = _this$getInterpolated.leftLabelStyle,\n          rightButtonStyle = _this$getInterpolated.rightButtonStyle,\n          backgroundStyle = _this$getInterpolated.backgroundStyle;\n\n    const leftButton = left ? left({\n      backImage,\n      pressColorAndroid,\n      allowFontScaling: backAllowFontScaling,\n      onPress: onGoBack,\n      labelVisible: headerBackTitleVisible,\n      label: leftLabel !== undefined ? leftLabel : previousTitle,\n      truncatedLabel,\n      labelStyle: [leftLabelStyle, customLeftLabelStyle],\n      onLabelLayout: this.handleLeftLabelLayout,\n      screenLayout: layout,\n      titleLayout,\n      tintColor: headerTintColor,\n      canGoBack: Boolean(onGoBack)\n    }) : null;\n    const rightButton = right ? right({\n      tintColor: headerTintColor\n    }) : null;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Animated.View, {\n      pointerEvents: \"box-none\",\n      style: [StyleSheet.absoluteFill, {\n        zIndex: 0\n      }, backgroundStyle]\n    }, headerBackground ? headerBackground({\n      style: safeStyles\n    }) : headerTransparent ? null : /*#__PURE__*/React.createElement(HeaderBackground, {\n      style: safeStyles\n    })), /*#__PURE__*/React.createElement(Animated.View, {\n      pointerEvents: \"box-none\",\n      style: [{\n        height,\n        minHeight,\n        maxHeight,\n        opacity,\n        transform\n      }]\n    }, /*#__PURE__*/React.createElement(View, {\n      pointerEvents: \"none\",\n      style: {\n        height: headerStatusBarHeight\n      }\n    }), /*#__PURE__*/React.createElement(View, {\n      pointerEvents: \"box-none\",\n      style: styles.content\n    }, leftButton ? /*#__PURE__*/React.createElement(Animated.View, {\n      pointerEvents: \"box-none\",\n      style: [styles.left, {\n        left: insets.left\n      }, leftButtonStyle, leftContainerStyle]\n    }, leftButton) : null, /*#__PURE__*/React.createElement(Animated.View, {\n      pointerEvents: \"box-none\",\n      style: [headerTitleAlign === 'left' ? {\n        position: 'absolute',\n        left: (leftButton ? 72 : 16) + insets.left,\n        right: (rightButton ? 72 : 16) + insets.right\n      } : {\n        marginHorizontal: (leftButton ? 32 : 16) + (leftButton && headerBackTitleVisible !== false ? 40 : 0) + Math.max(insets.left, insets.right)\n      }, titleStyle, titleContainerStyle]\n    }, headerTitle({\n      children: currentTitle,\n      onLayout: this.handleTitleLayout,\n      allowFontScaling: titleAllowFontScaling,\n      tintColor: headerTintColor,\n      style: customTitleStyle\n    })), rightButton ? /*#__PURE__*/React.createElement(Animated.View, {\n      pointerEvents: \"box-none\",\n      style: [styles.right, {\n        right: insets.right\n      }, rightButtonStyle, rightContainerStyle]\n    }, rightButton) : null)));\n  }\n\n}\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n    flexDirection: 'row',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  left: {\n    position: 'absolute',\n    left: 0,\n    top: 0,\n    bottom: 0,\n    justifyContent: 'center',\n    alignItems: 'flex-start'\n  },\n  right: {\n    position: 'absolute',\n    right: 0,\n    top: 0,\n    bottom: 0,\n    justifyContent: 'center',\n    alignItems: 'flex-end'\n  }\n});","map":null,"metadata":{},"sourceType":"module"}