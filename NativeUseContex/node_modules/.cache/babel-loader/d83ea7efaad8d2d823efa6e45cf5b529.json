{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { nanoid } from 'nanoid/non-secure';\n/**\n * Base router object that can be used when writing custom routers.\n * This provides few helper methods to handle common actions such as `RESET`.\n */\n\nconst BaseRouter = {\n  getStateForAction(state, action) {\n    switch (action.type) {\n      case 'SET_PARAMS':\n        {\n          const index = action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n\n          if (index === -1) {\n            return null;\n          }\n\n          return _objectSpread(_objectSpread({}, state), {}, {\n            routes: state.routes.map((r, i) => i === index ? _objectSpread(_objectSpread({}, r), {}, {\n              params: _objectSpread(_objectSpread({}, r.params), action.payload.params)\n            }) : r)\n          });\n        }\n\n      case 'RESET':\n        {\n          const nextState = action.payload;\n\n          if (nextState.routes.length === 0 || nextState.routes.some(route => !state.routeNames.includes(route.name))) {\n            return null;\n          }\n\n          if (nextState.stale === false) {\n            if (state.routeNames.length !== nextState.routeNames.length || nextState.routeNames.some(name => !state.routeNames.includes(name))) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, nextState), {}, {\n              routes: nextState.routes.map(route => route.key ? route : _objectSpread(_objectSpread({}, route), {}, {\n                key: \"\".concat(route.name, \"-\").concat(nanoid())\n              }))\n            });\n          }\n\n          return nextState;\n        }\n\n      default:\n        return null;\n    }\n  },\n\n  shouldActionChangeFocus(action) {\n    return action.type === 'NAVIGATE';\n  }\n\n};\nexport default BaseRouter;","map":null,"metadata":{},"sourceType":"module"}