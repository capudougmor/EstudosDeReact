{"ast":null,"code":"import _slicedToArray from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport { Dimensions, StyleSheet } from 'react-native';\nimport NativeSafeAreaProvider from './NativeSafeAreaProvider';\nexport const SafeAreaInsetsContext = React.createContext(null);\nexport const SafeAreaFrameContext = React.createContext(null);\nexport function SafeAreaProvider({\n  children,\n  initialMetrics,\n  initialSafeAreaInsets,\n  style\n}) {\n  var _ref, _ref2, _initialMetrics$inset, _ref3, _initialMetrics$frame;\n\n  const parentInsets = useParentSafeAreaInsets();\n  const parentFrame = useParentSafeAreaFrame();\n\n  const _React$useState = React.useState((_ref = (_ref2 = (_initialMetrics$inset = initialMetrics === null || initialMetrics === void 0 ? void 0 : initialMetrics.insets) !== null && _initialMetrics$inset !== void 0 ? _initialMetrics$inset : initialSafeAreaInsets) !== null && _ref2 !== void 0 ? _ref2 : parentInsets) !== null && _ref !== void 0 ? _ref : null),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        insets = _React$useState2[0],\n        setInsets = _React$useState2[1];\n\n  const _React$useState3 = React.useState((_ref3 = (_initialMetrics$frame = initialMetrics === null || initialMetrics === void 0 ? void 0 : initialMetrics.frame) !== null && _initialMetrics$frame !== void 0 ? _initialMetrics$frame : parentFrame) !== null && _ref3 !== void 0 ? _ref3 : {\n    // Backwards compat so we render anyway if we don't have frame.\n    x: 0,\n    y: 0,\n    width: Dimensions.get('window').width,\n    height: Dimensions.get('window').height\n  }),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        frame = _React$useState4[0],\n        setFrame = _React$useState4[1];\n\n  const onInsetsChange = React.useCallback(event => {\n    const _event$nativeEvent = event.nativeEvent,\n          nextFrame = _event$nativeEvent.frame,\n          nextInsets = _event$nativeEvent.insets;\n\n    if ( // Backwards compat with old native code that won't send frame.\n    nextFrame && (nextFrame.height !== frame.height || nextFrame.width !== frame.width || nextFrame.x !== frame.x || nextFrame.y !== frame.y)) {\n      setFrame(nextFrame);\n    }\n\n    if (!insets || nextInsets.bottom !== insets.bottom || nextInsets.left !== insets.left || nextInsets.right !== insets.right || nextInsets.top !== insets.top) {\n      setInsets(nextInsets);\n    }\n  }, [frame, insets]);\n  return /*#__PURE__*/React.createElement(NativeSafeAreaProvider, {\n    style: [styles.fill, style],\n    onInsetsChange: onInsetsChange\n  }, insets != null ? /*#__PURE__*/React.createElement(SafeAreaFrameContext.Provider, {\n    value: frame\n  }, /*#__PURE__*/React.createElement(SafeAreaInsetsContext.Provider, {\n    value: insets\n  }, children)) : null);\n}\nconst styles = StyleSheet.create({\n  fill: {\n    flex: 1\n  }\n});\n\nfunction useParentSafeAreaInsets() {\n  return React.useContext(SafeAreaInsetsContext);\n}\n\nfunction useParentSafeAreaFrame() {\n  return React.useContext(SafeAreaFrameContext);\n}\n\nexport function useSafeAreaInsets() {\n  const safeArea = React.useContext(SafeAreaInsetsContext);\n\n  if (safeArea == null) {\n    throw new Error('No safe area insets value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.');\n  }\n\n  return safeArea;\n}\nexport function useSafeAreaFrame() {\n  const frame = React.useContext(SafeAreaFrameContext);\n\n  if (frame == null) {\n    throw new Error('No safe area frame value available. Make sure you are rendering `<SafeAreaProvider>` at the top of your app.');\n  }\n\n  return frame;\n}\nexport function withSafeAreaInsets(WrappedComponent) {\n  return /*#__PURE__*/React.forwardRef((props, ref) => /*#__PURE__*/React.createElement(SafeAreaConsumer, null, insets => /*#__PURE__*/React.createElement(WrappedComponent, _extends({}, props, {\n    insets: insets,\n    ref: ref\n  }))));\n}\n/**\n * @deprecated\n */\n\nexport function useSafeArea() {\n  return useSafeAreaInsets();\n}\n/**\n * @deprecated\n */\n\nexport const SafeAreaConsumer = SafeAreaInsetsContext.Consumer;\n/**\n * @deprecated\n */\n\nexport const SafeAreaContext = SafeAreaInsetsContext;","map":null,"metadata":{},"sourceType":"module"}