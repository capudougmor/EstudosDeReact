{"ast":null,"code":"import _createForOfIteratorHelper from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport _slicedToArray from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport escape from 'escape-string-regexp';\nimport queryString from 'query-string';\nimport checkLegacyPathConfig from './checkLegacyPathConfig';\n/**\n * Utility to parse a path string to initial state object accepted by the container.\n * This is useful for deep linking when we need to handle the incoming URL.\n *\n * Example:\n * ```js\n * getStateFromPath(\n *   '/chat/jane/42',\n *   {\n *     screens: {\n *       Chat: {\n *         path: 'chat/:author/:id',\n *         parse: { id: Number }\n *       }\n *     }\n *   }\n * )\n * ```\n * @param path Path string to parse and convert, e.g. /foo/bar?count=42.\n * @param options Extra options to fine-tune how to parse the path.\n */\n\nexport default function getStateFromPath(path, options) {\n  const _checkLegacyPathConfi = checkLegacyPathConfig(options),\n        _checkLegacyPathConfi2 = _slicedToArray(_checkLegacyPathConfi, 2),\n        legacy = _checkLegacyPathConfi2[0],\n        compatOptions = _checkLegacyPathConfi2[1];\n\n  let initialRoutes = [];\n\n  if (compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.initialRouteName) {\n    initialRoutes.push({\n      initialRouteName: compatOptions.initialRouteName,\n      connectedRoutes: Object.keys(compatOptions.screens)\n    });\n  }\n\n  const screens = compatOptions === null || compatOptions === void 0 ? void 0 : compatOptions.screens;\n  let remaining = path.replace(/\\/+/g, '/') // Replace multiple slash (//) with single ones\n  .replace(/^\\//, '') // Remove extra leading slash\n  .replace(/\\?.*$/, ''); // Remove query params which we will handle later\n  // Make sure there is a trailing slash\n\n  remaining = remaining.endsWith('/') ? remaining : \"\".concat(remaining, \"/\");\n\n  if (screens === undefined) {\n    // When no config is specified, use the path segments as route names\n    const routes = remaining.split('/').filter(Boolean).map((segment, i, self) => {\n      const name = decodeURIComponent(segment);\n\n      if (i === self.length - 1) {\n        return {\n          name,\n          params: parseQueryParams(path)\n        };\n      }\n\n      return {\n        name\n      };\n    });\n\n    if (routes.length) {\n      return createNestedStateObject(routes, initialRoutes);\n    }\n\n    return undefined;\n  } // Create a normalized configs array which will be easier to use\n\n\n  const configs = [].concat(...Object.keys(screens).map(key => createNormalizedConfigs(legacy, key, screens, [], initialRoutes))).sort((a, b) => {\n    // Sort config so that:\n    // - the most exhaustive ones are always at the beginning\n    // - patterns with wildcard are always at the end\n    // If one of the patterns starts with the other, it's more exhaustive\n    // So move it up\n    if (a.pattern.startsWith(b.pattern)) {\n      return 1;\n    }\n\n    if (b.pattern.startsWith(a.pattern)) {\n      return 1;\n    }\n\n    const aParts = a.pattern.split('/');\n    const bParts = b.pattern.split('/');\n    const aWildcardIndex = aParts.indexOf('*');\n    const bWildcardIndex = bParts.indexOf('*'); // If only one of the patterns has a wildcard, move it down in the list\n\n    if (aWildcardIndex === -1 && bWildcardIndex !== -1) {\n      return -1;\n    }\n\n    if (aWildcardIndex !== -1 && bWildcardIndex === -1) {\n      return 1;\n    }\n\n    if (aWildcardIndex === bWildcardIndex) {\n      // If `b` has more `/`, it's more exhaustive\n      // So we move it up in the list\n      return bParts.length - aParts.length;\n    } // If the wildcard appears later in the pattern (has higher index), it's more specific\n    // So we move it up in the list\n\n\n    return bWildcardIndex - aWildcardIndex;\n  });\n\n  if (remaining === '/') {\n    // We need to add special handling of empty path so navigation to empty path also works\n    // When handling empty path, we should only look at the root level config\n    const match = configs.find(config => config.path === '' && config.routeNames.every( // Make sure that none of the parent configs have a non-empty path defined\n    name => {\n      var _configs$find;\n\n      return !((_configs$find = configs.find(c => c.screen === name)) === null || _configs$find === void 0 ? void 0 : _configs$find.path);\n    }));\n\n    if (match) {\n      return createNestedStateObject(match.routeNames.map((name, i, self) => {\n        if (i === self.length - 1) {\n          return {\n            name,\n            params: parseQueryParams(path, match.parse)\n          };\n        }\n\n        return {\n          name\n        };\n      }), initialRoutes);\n    }\n\n    return undefined;\n  }\n\n  let result;\n  let current;\n\n  if (legacy === false) {\n    // If we're not in legacy mode,, we match the whole path against the regex instead of segments\n    // This makes sure matches such as wildcard will catch any unmatched routes, even if nested\n    const _matchAgainstConfigs = matchAgainstConfigs(remaining, configs.map(c => _objectSpread(_objectSpread({}, c), {}, {\n      // Add `$` to the regex to make sure it matches till end of the path and not just beginning\n      regex: c.regex ? new RegExp(c.regex.source + '$') : undefined\n    }))),\n          routeNames = _matchAgainstConfigs.routeNames,\n          allParams = _matchAgainstConfigs.allParams,\n          remainingPath = _matchAgainstConfigs.remainingPath;\n\n    if (routeNames !== undefined) {\n      // This will always be empty if full path matched\n      remaining = remainingPath;\n      current = createNestedStateObject(createRouteObjects(configs, routeNames, allParams), initialRoutes);\n      result = current;\n    }\n  } else {\n    // In legacy mode, we divide the path into segments and match piece by piece\n    // This preserves the legacy behaviour, but we should remove it in next major\n    while (remaining) {\n      let _matchAgainstConfigs2 = matchAgainstConfigs(remaining, configs),\n          routeNames = _matchAgainstConfigs2.routeNames,\n          allParams = _matchAgainstConfigs2.allParams,\n          remainingPath = _matchAgainstConfigs2.remainingPath;\n\n      remaining = remainingPath; // If we hadn't matched any segments earlier, use the path as route name\n\n      if (routeNames === undefined) {\n        const segments = remaining.split('/');\n        routeNames = [decodeURIComponent(segments[0])];\n        segments.shift();\n        remaining = segments.join('/');\n      }\n\n      const state = createNestedStateObject(createRouteObjects(configs, routeNames, allParams), initialRoutes);\n\n      if (current) {\n        var _current2; // The state should be nested inside the deepest route we parsed before\n\n\n        while ((_current = current) === null || _current === void 0 ? void 0 : _current.routes[current.index || 0].state) {\n          var _current;\n\n          current = current.routes[current.index || 0].state;\n        }\n\n        current.routes[((_current2 = current) === null || _current2 === void 0 ? void 0 : _current2.index) || 0].state = state;\n      } else {\n        result = state;\n      }\n\n      current = state;\n    }\n  }\n\n  if (current == null || result == null) {\n    return undefined;\n  }\n\n  const route = findFocusedRoute(current);\n  const params = parseQueryParams(path, findParseConfigForRoute(route.name, configs));\n\n  if (params) {\n    // @ts-expect-error: params should be treated as read-only, but we're creating the state here so it doesn't matter\n    route.params = _objectSpread(_objectSpread({}, route.params), params);\n  }\n\n  return result;\n}\n\nconst joinPaths = (...paths) => [].concat(...paths.map(p => p.split('/'))).filter(Boolean).join('/');\n\nconst matchAgainstConfigs = (remaining, configs) => {\n  let routeNames;\n  let allParams;\n  let remainingPath = remaining; // Go through all configs, and see if the next path segment matches our regex\n\n  var _iterator = _createForOfIteratorHelper(configs),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      const config = _step.value;\n\n      if (!config.regex) {\n        continue;\n      }\n\n      const match = remainingPath.match(config.regex); // If our regex matches, we need to extract params from the path\n\n      if (match) {\n        routeNames = [...config.routeNames];\n        const paramPatterns = config.pattern.split('/').filter(p => p.startsWith(':'));\n\n        if (paramPatterns.length) {\n          allParams = paramPatterns.reduce((acc, p, i) => {\n            const value = match[(i + 1) * 2].replace(/\\//, ''); // The param segments appear every second item starting from 2 in the regex match result\n\n            acc[p] = value;\n            return acc;\n          }, {});\n        }\n\n        remainingPath = remainingPath.replace(match[1], '');\n        break;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return {\n    routeNames,\n    allParams,\n    remainingPath\n  };\n};\n\nconst createNormalizedConfigs = (legacy, screen, routeConfig, routeNames = [], initials, parentPattern) => {\n  const configs = [];\n  routeNames.push(screen);\n  const config = routeConfig[screen];\n\n  if (typeof config === 'string') {\n    // If a string is specified as the value of the key(e.g. Foo: '/path'), use it as the pattern\n    const pattern = parentPattern ? joinPaths(parentPattern, config) : config;\n    configs.push(createConfigItem(legacy, screen, routeNames, pattern, config));\n  } else if (typeof config === 'object') {\n    let pattern; // if an object is specified as the value (e.g. Foo: { ... }),\n    // it can have `path` property and\n    // it could have `screens` prop which has nested configs\n\n    if (typeof config.path === 'string') {\n      if (legacy) {\n        pattern = config.exact !== true && parentPattern ? joinPaths(parentPattern, config.path) : config.path;\n      } else {\n        if (config.exact && config.path === undefined) {\n          throw new Error(\"A 'path' needs to be specified when specifying 'exact: true'. If you don't want this screen in the URL, specify it as empty string, e.g. `path: ''`.\");\n        }\n\n        pattern = config.exact !== true ? joinPaths(parentPattern || '', config.path || '') : config.path || '';\n      }\n\n      configs.push(createConfigItem(legacy, screen, routeNames, pattern, config.path, config.parse));\n    }\n\n    if (config.screens) {\n      // property `initialRouteName` without `screens` has no purpose\n      if (config.initialRouteName) {\n        initials.push({\n          initialRouteName: config.initialRouteName,\n          connectedRoutes: Object.keys(config.screens)\n        });\n      }\n\n      Object.keys(config.screens).forEach(nestedConfig => {\n        var _pattern;\n\n        const result = createNormalizedConfigs(legacy, nestedConfig, config.screens, routeNames, initials, (_pattern = pattern) !== null && _pattern !== void 0 ? _pattern : parentPattern);\n        configs.push(...result);\n      });\n    }\n  }\n\n  routeNames.pop();\n  return configs;\n};\n\nconst createConfigItem = (legacy, screen, routeNames, pattern, path, parse) => {\n  // Normalize pattern to remove any leading, trailing slashes, duplicate slashes etc.\n  pattern = pattern.split('/').filter(Boolean).join('/');\n  const regex = pattern ? new RegExp(\"^(\".concat(pattern.split('/').map(it => {\n    if (legacy && it === '*') {\n      throw new Error(\"Please update your config to the new format to use wildcard pattern ('*'). https://reactnavigation.org/docs/configuring-links/#updating-config\");\n    }\n\n    if (it.startsWith(':')) {\n      return \"(([^/]+\\\\/)\".concat(it.endsWith('?') ? '?' : '', \")\");\n    }\n\n    return \"\".concat(it === '*' ? '.*' : escape(it), \"\\\\/\");\n  }).join(''), \")\")) : undefined;\n  return {\n    screen,\n    regex,\n    pattern,\n    path,\n    // The routeNames array is mutated, so copy it to keep the current state\n    routeNames: [...routeNames],\n    parse\n  };\n};\n\nconst findParseConfigForRoute = (routeName, flatConfig) => {\n  var _iterator2 = _createForOfIteratorHelper(flatConfig),\n      _step2;\n\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      const config = _step2.value;\n\n      if (routeName === config.routeNames[config.routeNames.length - 1]) {\n        return config.parse;\n      }\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n\n  return undefined;\n}; // Try to find an initial route connected with the one passed\n\n\nconst findInitialRoute = (routeName, initialRoutes) => {\n  var _iterator3 = _createForOfIteratorHelper(initialRoutes),\n      _step3;\n\n  try {\n    for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n      const config = _step3.value;\n\n      if (config.connectedRoutes.includes(routeName)) {\n        return config.initialRouteName === routeName ? undefined : config.initialRouteName;\n      }\n    }\n  } catch (err) {\n    _iterator3.e(err);\n  } finally {\n    _iterator3.f();\n  }\n\n  return undefined;\n}; // returns state object with values depending on whether\n// it is the end of state and if there is initialRoute for this level\n\n\nconst createStateObject = (initialRoute, routeName, params, isEmpty) => {\n  if (isEmpty) {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          name: routeName,\n          params\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          name: routeName,\n          params\n        }]\n      };\n    }\n  } else {\n    if (initialRoute) {\n      return {\n        index: 1,\n        routes: [{\n          name: initialRoute\n        }, {\n          name: routeName,\n          params,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    } else {\n      return {\n        routes: [{\n          name: routeName,\n          params,\n          state: {\n            routes: []\n          }\n        }]\n      };\n    }\n  }\n};\n\nconst createNestedStateObject = (routes, initialRoutes) => {\n  let state;\n  let route = routes.shift();\n  let initialRoute = findInitialRoute(route.name, initialRoutes);\n  state = createStateObject(initialRoute, route.name, route.params, routes.length === 0);\n\n  if (routes.length > 0) {\n    let nestedState = state;\n\n    while (route = routes.shift()) {\n      initialRoute = findInitialRoute(route.name, initialRoutes);\n      const nestedStateIndex = nestedState.index || nestedState.routes.length - 1;\n      nestedState.routes[nestedStateIndex].state = createStateObject(initialRoute, route.name, route.params, routes.length === 0);\n\n      if (routes.length > 0) {\n        nestedState = nestedState.routes[nestedStateIndex].state;\n      }\n    }\n  }\n\n  return state;\n};\n\nconst createRouteObjects = (configs, routeNames, allParams) => routeNames.map(name => {\n  const config = configs.find(c => c.screen === name);\n  let params;\n\n  if (allParams && (config === null || config === void 0 ? void 0 : config.path)) {\n    const pattern = config.path;\n\n    if (pattern) {\n      const paramPatterns = pattern.split('/').filter(p => p.startsWith(':'));\n\n      if (paramPatterns.length) {\n        params = paramPatterns.reduce((acc, p) => {\n          const key = p.replace(/^:/, '').replace(/\\?$/, '');\n          const value = allParams[p];\n\n          if (value) {\n            acc[key] = config.parse && config.parse[key] ? config.parse[key](value) : value;\n          }\n\n          return acc;\n        }, {});\n      }\n    }\n  }\n\n  if (params && Object.keys(params).length) {\n    return {\n      name,\n      params\n    };\n  }\n\n  return {\n    name\n  };\n});\n\nconst findFocusedRoute = state => {\n  var _current4;\n\n  let current = state;\n\n  while ((_current3 = current) === null || _current3 === void 0 ? void 0 : _current3.routes[current.index || 0].state) {\n    var _current3; // The query params apply to the deepest route\n\n\n    current = current.routes[current.index || 0].state;\n  }\n\n  const route = current.routes[((_current4 = current) === null || _current4 === void 0 ? void 0 : _current4.index) || 0];\n  return route;\n};\n\nconst parseQueryParams = (path, parseConfig) => {\n  const query = path.split('?')[1];\n  const params = queryString.parse(query);\n\n  if (parseConfig) {\n    Object.keys(params).forEach(name => {\n      if (parseConfig[name] && typeof params[name] === 'string') {\n        params[name] = parseConfig[name](params[name]);\n      }\n    });\n  }\n\n  return Object.keys(params).length ? params : undefined;\n};","map":null,"metadata":{},"sourceType":"module"}