{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { StackActions } from '@react-navigation/native';\nimport HeaderSegment from './HeaderSegment';\nimport HeaderTitle from './HeaderTitle';\nimport debounce from '../../utils/debounce';\nexport default /*#__PURE__*/React.memo(function Header(props) {\n  const scene = props.scene,\n        previous = props.previous,\n        layout = props.layout,\n        insets = props.insets,\n        navigation = props.navigation,\n        styleInterpolator = props.styleInterpolator;\n  const options = scene.descriptor.options;\n  const title = typeof options.headerTitle !== 'function' && options.headerTitle !== undefined ? options.headerTitle : options.title !== undefined ? options.title : scene.route.name;\n  let leftLabel; // The label for the left back button shows the title of the previous screen\n  // If a custom label is specified, we use it, otherwise use previous screen's title\n\n  if (options.headerBackTitle !== undefined) {\n    leftLabel = options.headerBackTitle;\n  } else if (previous) {\n    const o = previous.descriptor.options;\n    leftLabel = typeof o.headerTitle !== 'function' && o.headerTitle !== undefined ? o.headerTitle : o.title !== undefined ? o.title : previous.route.name;\n  } // eslint-disable-next-line react-hooks/exhaustive-deps\n\n\n  const goBack = React.useCallback(debounce(() => {\n    if (navigation.isFocused() && navigation.canGoBack()) {\n      navigation.dispatch(_objectSpread(_objectSpread({}, StackActions.pop()), {}, {\n        source: scene.route.key\n      }));\n    }\n  }, 50), [navigation, scene.route.key]);\n  return /*#__PURE__*/React.createElement(HeaderSegment, _extends({}, options, {\n    insets: insets,\n    layout: layout,\n    scene: scene,\n    title: title,\n    leftLabel: leftLabel,\n    headerTitle: typeof options.headerTitle !== 'function' ? props => /*#__PURE__*/React.createElement(HeaderTitle, props) : options.headerTitle,\n    onGoBack: previous ? goBack : undefined,\n    styleInterpolator: styleInterpolator\n  }));\n});","map":null,"metadata":{},"sourceType":"module"}