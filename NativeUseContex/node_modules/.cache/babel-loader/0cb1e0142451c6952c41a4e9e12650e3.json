{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { Animated, View, Platform } from 'react-native';\nlet Screens;\n\ntry {\n  Screens = require('react-native-screens');\n} catch (e) {} // Ignore\n// The web implementation in react-native-screens seems buggy.\n// The view doesn't become visible after coming back in some cases.\n// So we use our custom implementation.\n\n\nclass WebScreen extends React.Component {\n  render() {\n    const _this$props = this.props,\n          active = _this$props.active,\n          style = _this$props.style,\n          rest = _objectWithoutProperties(_this$props, [\"active\", \"style\"]);\n\n    return /*#__PURE__*/React.createElement(View // @ts-expect-error: hidden exists on web, but not in React Native\n    , _extends({\n      hidden: !active,\n      style: [style, {\n        display: active ? 'flex' : 'none'\n      }]\n    }, rest));\n  }\n\n}\n\nconst AnimatedWebScreen = Animated.createAnimatedComponent(WebScreen);\nexport const MaybeScreenContainer = _ref => {\n  let enabled = _ref.enabled,\n      rest = _objectWithoutProperties(_ref, [\"enabled\"]);\n\n  if (enabled && Platform.OS !== 'web' && Screens && Screens.screensEnabled()) {\n    return /*#__PURE__*/React.createElement(Screens.ScreenContainer, rest);\n  }\n\n  return /*#__PURE__*/React.createElement(View, rest);\n};\nexport const MaybeScreen = _ref2 => {\n  let enabled = _ref2.enabled,\n      active = _ref2.active,\n      rest = _objectWithoutProperties(_ref2, [\"enabled\", \"active\"]);\n\n  if (enabled && Platform.OS === 'web') {\n    // @ts-expect-error: the Animated.createAnimatedComponent types don't work properly\n    return /*#__PURE__*/React.createElement(AnimatedWebScreen, _extends({\n      active: active\n    }, rest));\n  }\n\n  if (enabled && Screens && Screens.screensEnabled()) {\n    // @ts-expect-error: stackPresentation is incorrectly marked as required\n    return /*#__PURE__*/React.createElement(Screens.Screen, _extends({\n      active: active\n    }, rest));\n  }\n\n  return /*#__PURE__*/React.createElement(View, rest);\n};","map":null,"metadata":{},"sourceType":"module"}