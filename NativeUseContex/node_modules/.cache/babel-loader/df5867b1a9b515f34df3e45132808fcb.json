{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { useSafeAreaInsets } from './SafeAreaContext'; // prettier-ignore\n\nconst TOP = 0b1000,\n      RIGHT = 0b0100,\n      BOTTOM = 0b0010,\n      LEFT = 0b0001,\n      ALL = 0b1111;\n/* eslint-disable no-bitwise */\n\nconst edgeBitmaskMap = {\n  top: TOP,\n  right: RIGHT,\n  bottom: BOTTOM,\n  left: LEFT\n};\nexport function SafeAreaView(_ref) {\n  let _ref$style = _ref.style,\n      style = _ref$style === void 0 ? {} : _ref$style,\n      mode = _ref.mode,\n      edges = _ref.edges,\n      rest = _objectWithoutProperties(_ref, [\"style\", \"mode\", \"edges\"]);\n\n  const insets = useSafeAreaInsets();\n  const edgeBitmask = edges != null ? edges.reduce((accum, edge) => accum | edgeBitmaskMap[edge], 0) : ALL;\n  const appliedStyle = React.useMemo(() => {\n    const insetTop = edgeBitmask & TOP ? insets.top : 0;\n    const insetRight = edgeBitmask & RIGHT ? insets.right : 0;\n    const insetBottom = edgeBitmask & BOTTOM ? insets.bottom : 0;\n    const insetLeft = edgeBitmask & LEFT ? insets.left : 0;\n    const flatStyle = StyleSheet.flatten(style);\n\n    if (mode === 'margin') {\n      const _flatStyle$margin = flatStyle.margin,\n            margin = _flatStyle$margin === void 0 ? 0 : _flatStyle$margin,\n            _flatStyle$marginVert = flatStyle.marginVertical,\n            marginVertical = _flatStyle$marginVert === void 0 ? margin : _flatStyle$marginVert,\n            _flatStyle$marginHori = flatStyle.marginHorizontal,\n            marginHorizontal = _flatStyle$marginHori === void 0 ? margin : _flatStyle$marginHori,\n            _flatStyle$marginTop = flatStyle.marginTop,\n            marginTop = _flatStyle$marginTop === void 0 ? marginVertical : _flatStyle$marginTop,\n            _flatStyle$marginRigh = flatStyle.marginRight,\n            marginRight = _flatStyle$marginRigh === void 0 ? marginHorizontal : _flatStyle$marginRigh,\n            _flatStyle$marginBott = flatStyle.marginBottom,\n            marginBottom = _flatStyle$marginBott === void 0 ? marginVertical : _flatStyle$marginBott,\n            _flatStyle$marginLeft = flatStyle.marginLeft,\n            marginLeft = _flatStyle$marginLeft === void 0 ? marginHorizontal : _flatStyle$marginLeft;\n      const marginStyle = {\n        marginTop: marginTop + insetTop,\n        marginRight: marginRight + insetRight,\n        marginBottom: marginBottom + insetBottom,\n        marginLeft: marginLeft + insetLeft\n      };\n      return [style, marginStyle];\n    } else {\n      const _flatStyle$padding = flatStyle.padding,\n            padding = _flatStyle$padding === void 0 ? 0 : _flatStyle$padding,\n            _flatStyle$paddingVer = flatStyle.paddingVertical,\n            paddingVertical = _flatStyle$paddingVer === void 0 ? padding : _flatStyle$paddingVer,\n            _flatStyle$paddingHor = flatStyle.paddingHorizontal,\n            paddingHorizontal = _flatStyle$paddingHor === void 0 ? padding : _flatStyle$paddingHor,\n            _flatStyle$paddingTop = flatStyle.paddingTop,\n            paddingTop = _flatStyle$paddingTop === void 0 ? paddingVertical : _flatStyle$paddingTop,\n            _flatStyle$paddingRig = flatStyle.paddingRight,\n            paddingRight = _flatStyle$paddingRig === void 0 ? paddingHorizontal : _flatStyle$paddingRig,\n            _flatStyle$paddingBot = flatStyle.paddingBottom,\n            paddingBottom = _flatStyle$paddingBot === void 0 ? paddingVertical : _flatStyle$paddingBot,\n            _flatStyle$paddingLef = flatStyle.paddingLeft,\n            paddingLeft = _flatStyle$paddingLef === void 0 ? paddingHorizontal : _flatStyle$paddingLef;\n      const paddingStyle = {\n        paddingTop: paddingTop + insetTop,\n        paddingRight: paddingRight + insetRight,\n        paddingBottom: paddingBottom + insetBottom,\n        paddingLeft: paddingLeft + insetLeft\n      };\n      return [style, paddingStyle];\n    }\n  }, [style, insets, mode, edgeBitmask]);\n  return /*#__PURE__*/React.createElement(View, _extends({\n    style: appliedStyle\n  }, rest));\n}","map":null,"metadata":{},"sourceType":"module"}