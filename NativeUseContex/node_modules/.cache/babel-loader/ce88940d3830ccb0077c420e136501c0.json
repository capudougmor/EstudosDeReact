{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport { nanoid } from 'nanoid/non-secure';\nimport BaseRouter from './BaseRouter';\nexport const StackActions = {\n  replace(name, params) {\n    return {\n      type: 'REPLACE',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n\n  push(name, params) {\n    return {\n      type: 'PUSH',\n      payload: {\n        name,\n        params\n      }\n    };\n  },\n\n  pop(count = 1) {\n    return {\n      type: 'POP',\n      payload: {\n        count\n      }\n    };\n  },\n\n  popToTop() {\n    return {\n      type: 'POP_TO_TOP'\n    };\n  }\n\n};\nexport default function StackRouter(options) {\n  const router = _objectSpread(_objectSpread({}, BaseRouter), {}, {\n    type: 'stack',\n\n    getInitialState({\n      routeNames,\n      routeParamList\n    }) {\n      const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: 0,\n        routeNames,\n        routes: [{\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        }]\n      };\n    },\n\n    getRehydratedState(partialState, {\n      routeNames,\n      routeParamList\n    }) {\n      let state = partialState;\n\n      if (state.stale === false) {\n        return state;\n      }\n\n      const routes = state.routes.filter(route => routeNames.includes(route.name)).map(route => _objectSpread(_objectSpread({}, route), {}, {\n        key: route.key || \"\".concat(route.name, \"-\").concat(nanoid()),\n        params: routeParamList[route.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[route.name]), route.params) : route.params\n      }));\n\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return {\n        stale: false,\n        type: 'stack',\n        key: \"stack-\".concat(nanoid()),\n        index: routes.length - 1,\n        routeNames,\n        routes\n      };\n    },\n\n    getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList\n    }) {\n      const routes = state.routes.filter(route => routeNames.includes(route.name));\n\n      if (routes.length === 0) {\n        const initialRouteName = options.initialRouteName !== undefined && routeNames.includes(options.initialRouteName) ? options.initialRouteName : routeNames[0];\n        routes.push({\n          key: \"\".concat(initialRouteName, \"-\").concat(nanoid()),\n          name: initialRouteName,\n          params: routeParamList[initialRouteName]\n        });\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        routeNames,\n        routes,\n        index: Math.min(state.index, routes.length - 1)\n      });\n    },\n\n    getStateForRouteFocus(state, key) {\n      const index = state.routes.findIndex(r => r.key === key);\n\n      if (index === -1 || index === state.index) {\n        return state;\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        index,\n        routes: state.routes.slice(0, index + 1)\n      });\n    },\n\n    getStateForAction(state, action, options) {\n      const routeParamList = options.routeParamList;\n\n      switch (action.type) {\n        case 'REPLACE':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n\n            if (index === -1) {\n              return null;\n            }\n\n            const _action$payload = action.payload,\n                  name = _action$payload.name,\n                  key = _action$payload.key,\n                  params = _action$payload.params;\n\n            if (!state.routeNames.includes(name)) {\n              return null;\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              routes: state.routes.map((route, i) => i === index ? {\n                key: key !== undefined ? key : \"\".concat(name, \"-\").concat(nanoid()),\n                name,\n                params: routeParamList[name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[name]), params) : params\n              } : route)\n            });\n          }\n\n        case 'PUSH':\n          if (state.routeNames.includes(action.payload.name)) {\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index: state.index + 1,\n              routes: [...state.routes, {\n                key: action.payload.key === undefined ? \"\".concat(action.payload.name, \"-\").concat(nanoid()) : action.payload.key,\n                name: action.payload.name,\n                params: routeParamList[action.payload.name] !== undefined ? _objectSpread(_objectSpread({}, routeParamList[action.payload.name]), action.payload.params) : action.payload.params\n              }]\n            });\n          }\n\n          return null;\n\n        case 'POP':\n          {\n            const index = action.target === state.key && action.source ? state.routes.findIndex(r => r.key === action.source) : state.index;\n\n            if (index > 0) {\n              const count = Math.max(index - action.payload.count + 1, 1);\n              const routes = state.routes.slice(0, count).concat(state.routes.slice(index + 1));\n              return _objectSpread(_objectSpread({}, state), {}, {\n                index: routes.length - 1,\n                routes\n              });\n            }\n\n            return null;\n          }\n\n        case 'POP_TO_TOP':\n          return router.getStateForAction(state, {\n            type: 'POP',\n            payload: {\n              count: state.routes.length - 1\n            }\n          }, options);\n\n        case 'NAVIGATE':\n          if (action.payload.key || action.payload.name && state.routeNames.includes(action.payload.name)) {\n            // If the route already exists, navigate to that\n            let index = -1;\n\n            if (state.routes[state.index].name === action.payload.name && action.payload.key === undefined || state.routes[state.index].key === action.payload.key) {\n              index = state.index;\n            } else {\n              for (let i = state.routes.length - 1; i >= 0; i--) {\n                if (state.routes[i].name === action.payload.name && action.payload.key === undefined || state.routes[i].key === action.payload.key) {\n                  index = i;\n                  break;\n                }\n              }\n            }\n\n            if (index === -1 && action.payload.key && action.payload.name === undefined) {\n              return null;\n            }\n\n            if (index === -1 && action.payload.name !== undefined) {\n              return router.getStateForAction(state, {\n                type: 'PUSH',\n                payload: {\n                  key: action.payload.key,\n                  name: action.payload.name,\n                  params: action.payload.params\n                }\n              }, options);\n            }\n\n            return _objectSpread(_objectSpread({}, state), {}, {\n              index,\n              routes: [...state.routes.slice(0, index), action.payload.params !== undefined ? _objectSpread(_objectSpread({}, state.routes[index]), {}, {\n                params: _objectSpread(_objectSpread({}, state.routes[index].params), action.payload.params)\n              }) : state.routes[index]]\n            });\n          }\n\n          return null;\n\n        case 'GO_BACK':\n          if (state.index > 0) {\n            return router.getStateForAction(state, {\n              type: 'POP',\n              payload: {\n                count: 1\n              },\n              target: action.target,\n              source: action.source\n            }, options);\n          }\n\n          return null;\n\n        default:\n          return BaseRouter.getStateForAction(state, action);\n      }\n    },\n\n    actionCreators: StackActions\n  });\n\n  return router;\n}","map":null,"metadata":{},"sourceType":"module"}