{"ast":null,"code":"import * as React from 'react';\nimport { View, StyleSheet } from 'react-native';\nimport { NavigationContext, NavigationRouteContext } from '@react-navigation/native';\nimport Header from './Header';\nimport { forSlideLeft, forSlideUp, forNoAnimation, forSlideRight } from '../../TransitionConfigs/HeaderStyleInterpolators';\nimport HeaderShownContext from '../../utils/HeaderShownContext';\nimport PreviousSceneContext from '../../utils/PreviousSceneContext';\nexport default function HeaderContainer({\n  mode,\n  scenes,\n  layout,\n  insets,\n  getPreviousScene,\n  getFocusedRoute,\n  onContentHeightChange,\n  gestureDirection,\n  styleInterpolator,\n  style\n}) {\n  const focusedRoute = getFocusedRoute();\n  const isParentHeaderShown = React.useContext(HeaderShownContext);\n  const parentPreviousScene = React.useContext(PreviousSceneContext);\n  return /*#__PURE__*/React.createElement(View, {\n    pointerEvents: \"box-none\",\n    style: style\n  }, scenes.slice(-3).map((scene, i, self) => {\n    var _getPreviousScene;\n\n    if (mode === 'screen' && i !== self.length - 1 || !scene) {\n      return null;\n    }\n\n    const _ref = scene.descriptor.options || {},\n          header = _ref.header,\n          _ref$headerShown = _ref.headerShown,\n          headerShown = _ref$headerShown === void 0 ? isParentHeaderShown === false : _ref$headerShown,\n          headerTransparent = _ref.headerTransparent;\n\n    if (!headerShown) {\n      return null;\n    }\n\n    const isFocused = focusedRoute.key === scene.route.key;\n    const previous = (_getPreviousScene = getPreviousScene({\n      route: scene.route\n    })) !== null && _getPreviousScene !== void 0 ? _getPreviousScene : parentPreviousScene; // If the screen is next to a headerless screen, we need to make the header appear static\n    // This makes the header look like it's moving with the screen\n\n    const previousScene = self[i - 1];\n    const nextScene = self[i + 1];\n\n    const _ref2 = (previousScene === null || previousScene === void 0 ? void 0 : previousScene.descriptor.options) || {},\n          _ref2$headerShown = _ref2.headerShown,\n          previousHeaderShown = _ref2$headerShown === void 0 ? isParentHeaderShown === false : _ref2$headerShown;\n\n    const _ref3 = (nextScene === null || nextScene === void 0 ? void 0 : nextScene.descriptor.options) || {},\n          _ref3$headerShown = _ref3.headerShown,\n          nextHeaderShown = _ref3$headerShown === void 0 ? isParentHeaderShown === false : _ref3$headerShown;\n\n    const isHeaderStatic = previousHeaderShown === false && // We still need to animate when coming back from next scene\n    // A hacky way to check this is if the next scene exists\n    !nextScene || nextHeaderShown === false;\n    const props = {\n      mode,\n      layout,\n      insets,\n      scene,\n      previous,\n      navigation: scene.descriptor.navigation,\n      styleInterpolator: mode === 'float' ? isHeaderStatic ? gestureDirection === 'vertical' || gestureDirection === 'vertical-inverted' ? forSlideUp : gestureDirection === 'horizontal-inverted' ? forSlideRight : forSlideLeft : styleInterpolator : forNoAnimation\n    };\n    return /*#__PURE__*/React.createElement(NavigationContext.Provider, {\n      key: scene.route.key,\n      value: scene.descriptor.navigation\n    }, /*#__PURE__*/React.createElement(NavigationRouteContext.Provider, {\n      value: scene.route\n    }, /*#__PURE__*/React.createElement(View, {\n      onLayout: onContentHeightChange ? e => onContentHeightChange({\n        route: scene.route,\n        height: e.nativeEvent.layout.height\n      }) : undefined,\n      pointerEvents: isFocused ? 'box-none' : 'none',\n      accessibilityElementsHidden: !isFocused,\n      importantForAccessibility: isFocused ? 'auto' : 'no-hide-descendants',\n      style: // Avoid positioning the focused header absolutely\n      // Otherwise accessibility tools don't seem to be able to find it\n      mode === 'float' && !isFocused || headerTransparent ? styles.header : null\n    }, header !== undefined ? header(props) : /*#__PURE__*/React.createElement(Header, props))));\n  }));\n}\nconst styles = StyleSheet.create({\n  header: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0\n  }\n});","map":null,"metadata":{},"sourceType":"module"}