{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n/**\n * Copyright (c) Nicolas Gallagher.\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * \n */\n\n\nimport createElement from '../createElement';\nimport css from '../StyleSheet/css';\nimport { getAssetByID } from '../../modules/AssetRegistry';\nimport resolveShadowValue from '../StyleSheet/resolveShadowValue';\nimport ImageLoader from '../../modules/ImageLoader';\nimport PixelRatio from '../PixelRatio';\nimport StyleSheet from '../StyleSheet';\nimport TextAncestorContext from '../Text/TextAncestorContext';\nimport View from '../View';\nimport React, { forwardRef, useContext, useEffect, useRef, useState } from 'react';\nvar ERRORED = 'ERRORED';\nvar LOADED = 'LOADED';\nvar LOADING = 'LOADING';\nvar IDLE = 'IDLE';\nvar _filterId = 0;\nvar svgDataUriPattern = /^(data:image\\/svg\\+xml;utf8,)(.*)/;\n\nfunction createTintColorSVG(tintColor, id) {\n  return tintColor && id != null ? React.createElement(\"svg\", {\n    style: {\n      position: 'absolute',\n      height: 0,\n      visibility: 'hidden',\n      width: 0\n    }\n  }, React.createElement(\"defs\", null, React.createElement(\"filter\", {\n    id: \"tint-\" + id\n  }, React.createElement(\"feFlood\", {\n    floodColor: \"\" + tintColor,\n    key: tintColor\n  }), React.createElement(\"feComposite\", {\n    in2: \"SourceAlpha\",\n    operator: \"atop\"\n  })))) : null;\n}\n\nfunction getFlatStyle(style, blurRadius, filterId) {\n  var flatStyle = _objectSpread({}, StyleSheet.flatten(style));\n\n  var filter = flatStyle.filter,\n      resizeMode = flatStyle.resizeMode,\n      shadowOffset = flatStyle.shadowOffset,\n      tintColor = flatStyle.tintColor; // Add CSS filters\n  // React Native exposes these features as props and proprietary styles\n\n  var filters = [];\n  var _filter = null;\n\n  if (filter) {\n    filters.push(filter);\n  } //\n\n\n  if (blurRadius) {\n    filters.push(\"blur(\" + blurRadius + \"px)\");\n  }\n\n  if (shadowOffset) {\n    var shadowString = resolveShadowValue(flatStyle);\n\n    if (shadowString) {\n      filters.push(\"drop-shadow(\" + shadowString + \")\");\n    }\n  }\n\n  if (tintColor && filterId != null) {\n    filters.push(\"url(#tint-\" + filterId + \")\");\n  }\n\n  if (filters.length > 0) {\n    _filter = filters.join(' ');\n  } // These styles are converted to CSS filters applied to the\n  // element displaying the background image.\n\n\n  delete flatStyle.shadowColor;\n  delete flatStyle.shadowOpacity;\n  delete flatStyle.shadowOffset;\n  delete flatStyle.shadowRadius;\n  delete flatStyle.tintColor; // These styles are not supported on View\n\n  delete flatStyle.overlayColor;\n  delete flatStyle.resizeMode;\n  return [flatStyle, resizeMode, _filter, tintColor];\n}\n\nfunction resolveAssetDimensions(source) {\n  if (typeof source === 'number') {\n    var _getAssetByID = getAssetByID(source),\n        height = _getAssetByID.height,\n        width = _getAssetByID.width;\n\n    return {\n      height: height,\n      width: width\n    };\n  } else if (source != null && !Array.isArray(source) && typeof source === 'object') {\n    var _height = source.height,\n        _width = source.width;\n    return {\n      height: _height,\n      width: _width\n    };\n  }\n}\n\nfunction resolveAssetUri(source) {\n  var uri = null;\n\n  if (typeof source === 'number') {\n    // get the URI from the packager\n    var asset = getAssetByID(source);\n    var scale = asset.scales[0];\n\n    if (asset.scales.length > 1) {\n      var preferredScale = PixelRatio.get(); // Get the scale which is closest to the preferred scale\n\n      scale = asset.scales.reduce(function (prev, curr) {\n        return Math.abs(curr - preferredScale) < Math.abs(prev - preferredScale) ? curr : prev;\n      });\n    }\n\n    var scaleSuffix = scale !== 1 ? \"@\" + scale + \"x\" : '';\n    uri = asset ? asset.httpServerLocation + \"/\" + asset.name + scaleSuffix + \".\" + asset.type : '';\n  } else if (typeof source === 'string') {\n    uri = source;\n  } else if (source && typeof source.uri === 'string') {\n    uri = source.uri;\n  }\n\n  if (uri) {\n    var match = uri.match(svgDataUriPattern); // inline SVG markup may contain characters (e.g., #, \") that need to be escaped\n\n    if (match) {\n      var prefix = match[1],\n          svg = match[2];\n      var encodedSvg = encodeURIComponent(svg);\n      return \"\" + prefix + encodedSvg;\n    }\n  }\n\n  return uri;\n}\n\nvar Image = forwardRef(function (props, ref) {\n  var accessibilityLabel = props.accessibilityLabel,\n      accessibilityRole = props.accessibilityRole,\n      accessibilityState = props.accessibilityState,\n      accessible = props.accessible,\n      blurRadius = props.blurRadius,\n      defaultSource = props.defaultSource,\n      draggable = props.draggable,\n      importantForAccessibility = props.importantForAccessibility,\n      nativeID = props.nativeID,\n      onError = props.onError,\n      onLayout = props.onLayout,\n      onLoad = props.onLoad,\n      onLoadEnd = props.onLoadEnd,\n      onLoadStart = props.onLoadStart,\n      pointerEvents = props.pointerEvents,\n      source = props.source,\n      testID = props.testID;\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (props.children) {\n      throw new Error('The <Image> component cannot contain children. If you want to render content on top of the image, consider using the <ImageBackground> component or absolute positioning.');\n    }\n  }\n\n  var _useState = useState(function () {\n    var uri = resolveAssetUri(source);\n\n    if (uri != null) {\n      var isLoaded = ImageLoader.has(uri);\n\n      if (isLoaded) {\n        return LOADED;\n      }\n    }\n\n    return IDLE;\n  }),\n      state = _useState[0],\n      updateState = _useState[1];\n\n  var _useState2 = useState({}),\n      layout = _useState2[0],\n      updateLayout = _useState2[1];\n\n  var hasTextAncestor = useContext(TextAncestorContext);\n  var hiddenImageRef = useRef(null);\n  var filterRef = useRef(_filterId++);\n  var requestRef = useRef(null);\n  var shouldDisplaySource = state === LOADED || state === LOADING && defaultSource == null;\n\n  var _getFlatStyle = getFlatStyle(props.style, blurRadius, filterRef.current),\n      flatStyle = _getFlatStyle[0],\n      _resizeMode = _getFlatStyle[1],\n      filter = _getFlatStyle[2],\n      tintColor = _getFlatStyle[3];\n\n  var resizeMode = props.resizeMode || _resizeMode || 'cover';\n  var selectedSource = shouldDisplaySource ? source : defaultSource;\n  var displayImageUri = resolveAssetUri(selectedSource);\n  var imageSizeStyle = resolveAssetDimensions(selectedSource);\n  var backgroundImage = displayImageUri ? \"url(\\\"\" + displayImageUri + \"\\\")\" : null;\n  var backgroundSize = getBackgroundSize(); // Accessibility image allows users to trigger the browser's image context menu\n\n  var hiddenImage = displayImageUri ? createElement('img', {\n    alt: accessibilityLabel || '',\n    classList: [classes.accessibilityImage],\n    draggable: draggable || false,\n    ref: hiddenImageRef,\n    src: displayImageUri\n  }) : null;\n\n  function getBackgroundSize() {\n    if (hiddenImageRef.current != null && (resizeMode === 'center' || resizeMode === 'repeat')) {\n      var _hiddenImageRef$curre = hiddenImageRef.current,\n          naturalHeight = _hiddenImageRef$curre.naturalHeight,\n          naturalWidth = _hiddenImageRef$curre.naturalWidth;\n      var height = layout.height,\n          width = layout.width;\n\n      if (naturalHeight && naturalWidth && height && width) {\n        var scaleFactor = Math.min(1, width / naturalWidth, height / naturalHeight);\n        var x = Math.ceil(scaleFactor * naturalWidth);\n        var y = Math.ceil(scaleFactor * naturalHeight);\n        return x + \"px \" + y + \"px\";\n      }\n    }\n  }\n\n  function handleLayout(e) {\n    if (resizeMode === 'center' || resizeMode === 'repeat' || onLayout) {\n      var _layout = e.nativeEvent.layout;\n      onLayout && onLayout(e);\n      updateLayout(_layout);\n    }\n  } // Image loading\n\n\n  useEffect(function () {\n    abortPendingRequest();\n    var uri = resolveAssetUri(source);\n\n    if (uri != null) {\n      updateState(LOADING);\n\n      if (onLoadStart) {\n        onLoadStart();\n      }\n\n      requestRef.current = ImageLoader.load(uri, function load(e) {\n        updateState(LOADED);\n\n        if (onLoad) {\n          onLoad();\n        }\n\n        if (onLoadEnd) {\n          onLoadEnd();\n        }\n      }, function error() {\n        updateState(ERRORED);\n\n        if (onError) {\n          onError({\n            nativeEvent: {\n              error: \"Failed to load resource \" + uri + \" (404)\"\n            }\n          });\n        }\n\n        if (onLoadEnd) {\n          onLoadEnd();\n        }\n      });\n    }\n\n    function abortPendingRequest() {\n      if (requestRef.current != null) {\n        ImageLoader.abort(requestRef.current);\n        requestRef.current = null;\n      }\n    }\n\n    return abortPendingRequest;\n  }, [source, requestRef, updateState, onError, onLoad, onLoadEnd, onLoadStart]);\n  return React.createElement(View, {\n    accessibilityLabel: accessibilityLabel,\n    accessibilityRole: accessibilityRole,\n    accessibilityState: accessibilityState,\n    accessible: accessible,\n    importantForAccessibility: importantForAccessibility,\n    nativeID: nativeID,\n    onLayout: handleLayout,\n    pointerEvents: pointerEvents,\n    ref: ref,\n    style: [styles.root, hasTextAncestor && styles.inline, imageSizeStyle, flatStyle],\n    testID: testID\n  }, React.createElement(View, {\n    style: [styles.image, resizeModeStyles[resizeMode], {\n      backgroundImage: backgroundImage,\n      filter: filter\n    }, backgroundSize != null && {\n      backgroundSize: backgroundSize\n    }]\n  }), hiddenImage, createTintColorSVG(tintColor, filterRef.current));\n});\nImage.displayName = 'Image'; // $FlowFixMe\n\nImage.getSize = function (uri, success, failure) {\n  ImageLoader.getSize(uri, success, failure);\n}; // $FlowFixMe\n\n\nImage.prefetch = function (uri) {\n  return ImageLoader.prefetch(uri);\n}; // $FlowFixMe\n\n\nImage.queryCache = function (uris) {\n  return ImageLoader.queryCache(uris);\n};\n\nvar classes = css.create({\n  accessibilityImage: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    height: '100%',\n    opacity: 0,\n    width: '100%',\n    zIndex: -1\n  })\n});\nvar styles = StyleSheet.create({\n  root: {\n    flexBasis: 'auto',\n    overflow: 'hidden',\n    zIndex: 0\n  },\n  inline: {\n    display: 'inline-flex'\n  },\n  image: _objectSpread({}, StyleSheet.absoluteFillObject, {\n    backgroundColor: 'transparent',\n    backgroundPosition: 'center',\n    backgroundRepeat: 'no-repeat',\n    backgroundSize: 'cover',\n    height: '100%',\n    width: '100%',\n    zIndex: -1\n  })\n});\nvar resizeModeStyles = StyleSheet.create({\n  center: {\n    backgroundSize: 'auto'\n  },\n  contain: {\n    backgroundSize: 'contain'\n  },\n  cover: {\n    backgroundSize: 'cover'\n  },\n  none: {\n    backgroundPosition: '0 0',\n    backgroundSize: 'auto'\n  },\n  repeat: {\n    backgroundPosition: '0 0',\n    backgroundRepeat: 'repeat',\n    backgroundSize: 'auto'\n  },\n  stretch: {\n    backgroundSize: '100% 100%'\n  }\n});\nexport default Image;","map":null,"metadata":{},"sourceType":"module"}