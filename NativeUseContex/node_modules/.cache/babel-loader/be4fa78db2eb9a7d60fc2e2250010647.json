{"ast":null,"code":"import _createForOfIteratorHelper from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n/**\n * Hook for passing focus callback to children\n */\n\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners\n}) {\n  const _React$useContext = React.useContext(NavigationBuilderContext),\n        addListener = _React$useContext.addListener;\n\n  const listener = React.useCallback(callback => {\n    if (navigation.isFocused()) {\n      var _iterator = _createForOfIteratorHelper(focusedListeners),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          const listener = _step.value;\n\n          const _listener = listener(callback),\n                handled = _listener.handled,\n                result = _listener.result;\n\n          if (handled) {\n            return {\n              handled,\n              result\n            };\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(() => addListener === null || addListener === void 0 ? void 0 : addListener('focus', listener), [addListener, listener]);\n}","map":null,"metadata":{},"sourceType":"module"}