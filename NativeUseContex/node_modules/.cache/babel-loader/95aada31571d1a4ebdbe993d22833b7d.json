{"ast":null,"code":"const checkSerializableWithoutCircularReference = (o, seen, location) => {\n  if (o === undefined || o === null || typeof o === 'boolean' || typeof o === 'number' || typeof o === 'string') {\n    return {\n      serializable: true\n    };\n  }\n\n  if (Object.prototype.toString.call(o) !== '[object Object]' && !Array.isArray(o)) {\n    return {\n      serializable: false,\n      location,\n      reason: typeof o === 'function' ? 'Function' : String(o)\n    };\n  }\n\n  if (seen.has(o)) {\n    return {\n      serializable: false,\n      reason: 'Circular reference',\n      location\n    };\n  }\n\n  seen.add(o);\n\n  if (Array.isArray(o)) {\n    for (let i = 0; i < o.length; i++) {\n      const childResult = checkSerializableWithoutCircularReference(o[i], new Set(seen), [...location, i]);\n\n      if (!childResult.serializable) {\n        return childResult;\n      }\n    }\n  } else {\n    for (const key in o) {\n      const childResult = checkSerializableWithoutCircularReference(o[key], new Set(seen), [...location, key]);\n\n      if (!childResult.serializable) {\n        return childResult;\n      }\n    }\n  }\n\n  return {\n    serializable: true\n  };\n};\n\nexport default function checkSerializable(o) {\n  return checkSerializableWithoutCircularReference(o, new Set(), []);\n}","map":null,"metadata":{},"sourceType":"module"}