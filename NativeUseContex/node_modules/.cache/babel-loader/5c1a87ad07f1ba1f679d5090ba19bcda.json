{"ast":null,"code":"import _regeneratorRuntime from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nexport default function useThenable(create) {\n  const _React$useState = React.useState(create),\n        _React$useState2 = _slicedToArray(_React$useState, 1),\n        promise = _React$useState2[0]; // Check if our thenable is synchronous\n\n\n  let resolved = false;\n  let value;\n  promise.then(result => {\n    resolved = true;\n    value = result;\n  });\n\n  const _React$useState3 = React.useState([resolved, value]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        state = _React$useState4[0],\n        setState = _React$useState4[1];\n\n  React.useEffect(() => {\n    let cancelled = false;\n\n    const resolve = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return promise;\n\n            case 3:\n              result = _context.sent;\n\n            case 4:\n              _context.prev = 4;\n\n              if (!cancelled) {\n                setState([true, result]);\n              }\n\n              return _context.finish(4);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0,, 4, 7]]);\n      }));\n\n      return function resolve() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    if (!resolved) {\n      resolve();\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [promise, resolved]);\n  return state;\n}","map":{"version":3,"sources":["useThenable.tsx"],"names":["React","resolved","promise","result","value","cancelled","resolve","setState"],"mappings":";;;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,eAAe,SAAA,WAAA,CAAA,MAAA,EAAsD;AAAA,0BACjDA,KAAK,CAALA,QAAAA,CADiD,MACjDA,CADiD;AAAA;AAAA,QAC7D,OAD6D,wBAGnE;;;AACA,MAAIC,QAAQ,GAAZ,KAAA;AACA,MAAA,KAAA;AAEAC,EAAAA,OAAO,CAAPA,IAAAA,CAAcC,MAAD,IAAY;AACvBF,IAAAA,QAAQ,GAARA,IAAAA;AACAG,IAAAA,KAAK,GAALA,MAAAA;AAFFF,GAAAA;;AAPmE,2BAYzCF,KAAK,CAALA,QAAAA,CAAyC,CAAA,QAAA,EAAnE,KAAmE,CAAzCA,CAZyC;AAAA;AAAA,QAY7D,KAZ6D;AAAA,QAY7D,QAZ6D;;AAiBnEA,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAM;AACpB,QAAIK,SAAS,GAAb,KAAA;;AAEA,UAAMC,OAAO;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAIZH,OAJY;;AAAA;AAIZA,cAAAA,MAJY;;AAAA;AAAA;;AAMZ,kBAAI,CAAJ,SAAA,EAAgB;AACdI,gBAAAA,QAAQ,CAAC,CAAA,IAAA,EAATA,MAAS,CAAD,CAARA;AACD;;AARW;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAPD,OAAO;AAAA;AAAA;AAAA,OAAb;;AAYA,QAAI,CAAJ,QAAA,EAAe;AACbA,MAAAA,OAAO;AACR;;AAED,WAAO,MAAM;AACXD,MAAAA,SAAS,GAATA,IAAAA;AADF,KAAA;AAnBFL,GAAAA,EAsBG,CAAA,OAAA,EAtBHA,QAsBG,CAtBHA;AAwBA,SAAA,KAAA;AACD","sourcesContent":["import * as React from 'react';\n\nexport default function useThenable<T>(create: () => PromiseLike<T>) {\n  const [promise] = React.useState(create);\n\n  // Check if our thenable is synchronous\n  let resolved = false;\n  let value: T | undefined;\n\n  promise.then((result) => {\n    resolved = true;\n    value = result;\n  });\n\n  const [state, setState] = React.useState<[boolean, T | undefined]>([\n    resolved,\n    value,\n  ]);\n\n  React.useEffect(() => {\n    let cancelled = false;\n\n    const resolve = async () => {\n      let result;\n\n      try {\n        result = await promise;\n      } finally {\n        if (!cancelled) {\n          setState([true, result]);\n        }\n      }\n    };\n\n    if (!resolved) {\n      resolve();\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [promise, resolved]);\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}