{"ast":null,"code":"import * as React from 'react';\nimport { View } from 'react-native';\n/**\n * TODO:\n * Currently insets and frame are based on the window and are not\n * relative to the provider view. This is inconsistent with iOS and Android.\n * However in most cases if the provider view covers the screen this is not\n * an issue.\n */\n\nconst CSSTransitions = {\n  WebkitTransition: 'webkitTransitionEnd',\n  Transition: 'transitionEnd',\n  MozTransition: 'transitionend',\n  MSTransition: 'msTransitionEnd',\n  OTransition: 'oTransitionEnd'\n};\nexport default function NativeSafeAreaView({\n  children,\n  style,\n  onInsetsChange\n}) {\n  React.useEffect(() => {\n    // Skip for SSR.\n    if (typeof document === 'undefined') {\n      return;\n    }\n\n    const element = createContextElement();\n    document.body.appendChild(element);\n\n    const onEnd = () => {\n      const _window$getComputedSt = window.getComputedStyle(element),\n            paddingTop = _window$getComputedSt.paddingTop,\n            paddingBottom = _window$getComputedSt.paddingBottom,\n            paddingLeft = _window$getComputedSt.paddingLeft,\n            paddingRight = _window$getComputedSt.paddingRight;\n\n      const insets = {\n        top: paddingTop ? parseInt(paddingTop, 10) : 0,\n        bottom: paddingBottom ? parseInt(paddingBottom, 10) : 0,\n        left: paddingLeft ? parseInt(paddingLeft, 10) : 0,\n        right: paddingRight ? parseInt(paddingRight, 10) : 0\n      };\n      const frame = {\n        x: 0,\n        y: 0,\n        width: document.documentElement.offsetWidth,\n        height: document.documentElement.offsetHeight\n      }; // @ts-ignore: missing properties\n\n      onInsetsChange({\n        nativeEvent: {\n          insets,\n          frame\n        }\n      });\n    };\n\n    element.addEventListener(getSupportedTransitionEvent(), onEnd);\n    onEnd();\n    return () => {\n      document.body.removeChild(element);\n      element.removeEventListener(getSupportedTransitionEvent(), onEnd);\n    };\n  }, [onInsetsChange]);\n  return /*#__PURE__*/React.createElement(View, {\n    style: style\n  }, children);\n}\nlet _supportedTransitionEvent = null;\n\nfunction getSupportedTransitionEvent() {\n  if (_supportedTransitionEvent !== null) {\n    return _supportedTransitionEvent;\n  }\n\n  const element = document.createElement('invalidtype');\n  _supportedTransitionEvent = CSSTransitions.Transition;\n\n  for (const key in CSSTransitions) {\n    if (element.style[key] !== undefined) {\n      _supportedTransitionEvent = CSSTransitions[key];\n      break;\n    }\n  }\n\n  return _supportedTransitionEvent;\n}\n\nlet _supportedEnv = null;\n\nfunction getSupportedEnv() {\n  if (_supportedEnv !== null) {\n    return _supportedEnv;\n  }\n\n  const _window = window,\n        CSS = _window.CSS;\n\n  if (CSS && CSS.supports && CSS.supports('top: constant(safe-area-inset-top)')) {\n    _supportedEnv = 'constant';\n  } else {\n    _supportedEnv = 'env';\n  }\n\n  return _supportedEnv;\n}\n\nfunction getInset(side) {\n  return \"\".concat(getSupportedEnv(), \"(safe-area-inset-\").concat(side, \")\");\n}\n\nfunction createContextElement() {\n  const element = document.createElement('div');\n  const style = element.style;\n  style.position = 'fixed';\n  style.left = '0';\n  style.top = '0';\n  style.width = '0';\n  style.height = '0';\n  style.zIndex = '-1';\n  style.overflow = 'hidden';\n  style.visibility = 'hidden'; // Bacon: Anything faster than this and the callback will be invoked too early with the wrong insets\n\n  style.transitionDuration = '0.05s';\n  style.transitionProperty = 'padding';\n  style.transitionDelay = '0s';\n  style.paddingTop = getInset('top');\n  style.paddingBottom = getInset('bottom');\n  style.paddingLeft = getInset('left');\n  style.paddingRight = getInset('right');\n  return element;\n}","map":null,"metadata":{},"sourceType":"module"}