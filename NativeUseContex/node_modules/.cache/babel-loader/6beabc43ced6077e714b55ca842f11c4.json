{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { CommonActions } from '@react-navigation/routers';\nimport NavigationContext from './NavigationContext';\nimport UnhandledActionContext from './UnhandledActionContext';\nimport { PrivateValueStore } from './types'; // This is to make TypeScript compiler happy\n// eslint-disable-next-line babel/no-unused-expressions\n\nPrivateValueStore;\n/**\n * Navigation object with helper methods to be used by a navigator.\n * This object includes methods for common actions as well as methods the parent screen's navigation object.\n */\n\nexport default function useNavigationHelpers({\n  onAction,\n  getState,\n  emitter,\n  router\n}) {\n  const onUnhandledAction = React.useContext(UnhandledActionContext);\n  const parentNavigationHelpers = React.useContext(NavigationContext);\n  return React.useMemo(() => {\n    const dispatch = op => {\n      const action = typeof op === 'function' ? op(getState()) : op;\n      const handled = onAction(action);\n\n      if (!handled) {\n        onUnhandledAction === null || onUnhandledAction === void 0 ? void 0 : onUnhandledAction(action);\n      }\n    };\n\n    const actions = _objectSpread(_objectSpread({}, router.actionCreators), CommonActions);\n\n    const helpers = Object.keys(actions).reduce((acc, name) => {\n      // @ts-expect-error: name is a valid key, but TypeScript is dumb\n      acc[name] = (...args) => dispatch(actions[name](...args));\n\n      return acc;\n    }, {});\n    return _objectSpread(_objectSpread(_objectSpread({}, parentNavigationHelpers), helpers), {}, {\n      dispatch,\n      emit: emitter.emit,\n      isFocused: parentNavigationHelpers ? parentNavigationHelpers.isFocused : () => true,\n      canGoBack: () => {\n        const state = getState();\n        return router.getStateForAction(state, CommonActions.goBack(), {\n          routeNames: state.routeNames,\n          routeParamList: {}\n        }) !== null || (parentNavigationHelpers === null || parentNavigationHelpers === void 0 ? void 0 : parentNavigationHelpers.canGoBack()) || false;\n      },\n      dangerouslyGetParent: () => parentNavigationHelpers,\n      dangerouslyGetState: getState\n    });\n  }, [emitter.emit, getState, onAction, onUnhandledAction, parentNavigationHelpers, router]);\n}","map":null,"metadata":{},"sourceType":"module"}