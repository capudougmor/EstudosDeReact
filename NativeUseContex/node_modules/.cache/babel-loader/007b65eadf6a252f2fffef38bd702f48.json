{"ast":null,"code":"import _createForOfIteratorHelper from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\n/**\n * Hook for passing focus callback to children\n */\n\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners\n}) {\n  const _React$useContext = React.useContext(NavigationBuilderContext),\n        addListener = _React$useContext.addListener;\n\n  const listener = React.useCallback(callback => {\n    if (navigation.isFocused()) {\n      var _iterator = _createForOfIteratorHelper(focusedListeners),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          const listener = _step.value;\n\n          const _listener = listener(callback),\n                handled = _listener.handled,\n                result = _listener.result;\n\n          if (handled) {\n            return {\n              handled,\n              result\n            };\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      return {\n        handled: true,\n        result: callback(navigation)\n      };\n    } else {\n      return {\n        handled: false,\n        result: null\n      };\n    }\n  }, [focusedListeners, navigation]);\n  React.useEffect(() => addListener === null || addListener === void 0 ? void 0 : addListener('focus', listener), [addListener, listener]);\n}","map":{"version":3,"sources":["useFocusedListenersChildrenAdapter.tsx"],"names":["focusedListeners","addListener","React","listener","callback","navigation","result","handled"],"mappings":";AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,OAAA,wBAAA,MAAA,4BAAA;AAWA;;;;AAGA,eAAe,SAAA,kCAAA,CAA4C;AAAA,EAAA,UAAA;AAEzDA,EAAAA;AAFyD,CAA5C,EAGH;AAAA,4BACcE,KAAK,CAALA,UAAAA,CAAxB,wBAAwBA,CADd;AAAA,QACFD,WADE,qBACFA,WADE;;AAGV,QAAME,QAAQ,GAAG,KAAK,CAAL,WAAA,CACdC,QAAD,IAA8C;AAC5C,QAAIC,UAAU,CAAd,SAAIA,EAAJ,EAA4B;AAAA,iDAC1B,gBAD0B;AAAA;;AAAA;AAC1B,4DAAyC;AAAA,gBAAzC,QAAyC;;AAAA,4BACXF,QAAQ,CAApC,QAAoC,CADG;AAAA,gBACjC,OADiC,aACjC,OADiC;AAAA,gBACtBG,MADsB,aACtBA,MADsB;;AAGvC,cAAA,OAAA,EAAa;AACX,mBAAO;AAAA,cAAA,OAAA;AAAWA,cAAAA;AAAX,aAAP;AACD;AACF;AAPyB;AAAA;AAAA;AAAA;AAAA;;AAS1B,aAAO;AAAEC,QAAAA,OAAO,EAAT,IAAA;AAAiBD,QAAAA,MAAM,EAAEF,QAAQ,CAAA,UAAA;AAAjC,OAAP;AATF,KAAA,MAUO;AACL,aAAO;AAAEG,QAAAA,OAAO,EAAT,KAAA;AAAkBD,QAAAA,MAAM,EAAE;AAA1B,OAAP;AACD;AAdY,GAAA,EAgBf,CAAA,gBAAA,EAhBF,UAgBE,CAhBe,CAAjB;AAmBAJ,EAAAA,KAAK,CAALA,SAAAA,CAAgB,MAAMD,WAAN,KAAA,IAAMA,IAAAA,WAAN,KAAA,KAAA,CAAMA,GAAN,KAAA,CAAMA,GAAAA,WAAW,CAAA,OAAA,EAAjCC,QAAiC,CAAjCA,EAAwD,CAAA,WAAA,EAAxDA,QAAwD,CAAxDA;AAID","sourcesContent":["import * as React from 'react';\nimport type { ParamListBase } from '@react-navigation/routers';\nimport NavigationBuilderContext, {\n  FocusedNavigationCallback,\n  FocusedNavigationListener,\n} from './NavigationBuilderContext';\nimport type { NavigationHelpers } from './types';\n\ntype Options = {\n  navigation: NavigationHelpers<ParamListBase>;\n  focusedListeners: FocusedNavigationListener[];\n};\n\n/**\n * Hook for passing focus callback to children\n */\nexport default function useFocusedListenersChildrenAdapter({\n  navigation,\n  focusedListeners,\n}: Options) {\n  const { addListener } = React.useContext(NavigationBuilderContext);\n\n  const listener = React.useCallback(\n    (callback: FocusedNavigationCallback<any>) => {\n      if (navigation.isFocused()) {\n        for (const listener of focusedListeners) {\n          const { handled, result } = listener(callback);\n\n          if (handled) {\n            return { handled, result };\n          }\n        }\n\n        return { handled: true, result: callback(navigation) };\n      } else {\n        return { handled: false, result: null };\n      }\n    },\n    [focusedListeners, navigation]\n  );\n\n  React.useEffect(() => addListener?.('focus', listener), [\n    addListener,\n    listener,\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}