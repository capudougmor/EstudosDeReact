{"ast":null,"code":"import _regeneratorRuntime from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nexport default function useThenable(create) {\n  const _React$useState = React.useState(create),\n        _React$useState2 = _slicedToArray(_React$useState, 1),\n        promise = _React$useState2[0]; // Check if our thenable is synchronous\n\n\n  let resolved = false;\n  let value;\n  promise.then(result => {\n    resolved = true;\n    value = result;\n  });\n\n  const _React$useState3 = React.useState([resolved, value]),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        state = _React$useState4[0],\n        setState = _React$useState4[1];\n\n  React.useEffect(() => {\n    let cancelled = false;\n\n    const resolve = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var result;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return promise;\n\n            case 3:\n              result = _context.sent;\n\n            case 4:\n              _context.prev = 4;\n\n              if (!cancelled) {\n                setState([true, result]);\n              }\n\n              return _context.finish(4);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, null, [[0,, 4, 7]]);\n      }));\n\n      return function resolve() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    if (!resolved) {\n      resolve();\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [promise, resolved]);\n  return state;\n}","map":null,"metadata":{},"sourceType":"module"}