{"ast":null,"code":"import _createForOfIteratorHelper from \"/workspace/EstudosDeReact/NativeUseContex/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport NavigationRouteContext from './NavigationRouteContext';\nconst VISITED_ROUTE_KEYS = Symbol('VISITED_ROUTE_KEYS');\nexport const shouldPreventRemove = (emitter, beforeRemoveListeners, routes, action) => {\n  var _action$VISITED_ROUTE; // Call these in reverse order so last screens handle the event first\n\n\n  const reversedRoutes = [...routes].reverse();\n  const visitedRouteKeys = // @ts-expect-error: add this property to mark that we've already emitted this action\n  (_action$VISITED_ROUTE = action[VISITED_ROUTE_KEYS]) !== null && _action$VISITED_ROUTE !== void 0 ? _action$VISITED_ROUTE : new Set();\n\n  const beforeRemoveAction = _objectSpread(_objectSpread({}, action), {}, {\n    [VISITED_ROUTE_KEYS]: visitedRouteKeys\n  });\n\n  var _iterator = _createForOfIteratorHelper(reversedRoutes),\n      _step;\n\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      const route = _step.value;\n\n      var _beforeRemoveListener;\n\n      if (visitedRouteKeys.has(route.key)) {\n        // Skip if we've already emitted this action for this screen\n        continue;\n      } // First, we need to check if any child screens want to prevent it\n\n\n      const isPrevented = (_beforeRemoveListener = beforeRemoveListeners[route.key]) === null || _beforeRemoveListener === void 0 ? void 0 : _beforeRemoveListener.call(beforeRemoveListeners, beforeRemoveAction);\n\n      if (isPrevented) {\n        return true;\n      }\n\n      visitedRouteKeys.add(route.key);\n      const event = emitter.emit({\n        type: 'beforeRemove',\n        target: route.key,\n        data: {\n          action: beforeRemoveAction\n        },\n        canPreventDefault: true\n      });\n\n      if (event.defaultPrevented) {\n        return true;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n\n  return false;\n};\nexport default function useOnPreventRemove({\n  getState,\n  emitter,\n  beforeRemoveListeners\n}) {\n  const _React$useContext = React.useContext(NavigationBuilderContext),\n        addKeyedListener = _React$useContext.addKeyedListener;\n\n  const route = React.useContext(NavigationRouteContext);\n  const routeKey = route === null || route === void 0 ? void 0 : route.key;\n  React.useEffect(() => {\n    if (routeKey) {\n      return addKeyedListener === null || addKeyedListener === void 0 ? void 0 : addKeyedListener('beforeRemove', routeKey, action => {\n        const state = getState();\n        return shouldPreventRemove(emitter, beforeRemoveListeners, state.routes, action);\n      });\n    }\n  }, [addKeyedListener, beforeRemoveListeners, emitter, getState, routeKey]);\n}","map":null,"metadata":{},"sourceType":"module"}