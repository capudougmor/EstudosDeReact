{"ast":null,"code":"import * as React from 'react';\nimport NavigationBuilderContext from './NavigationBuilderContext';\nimport useOnPreventRemove, { shouldPreventRemove } from './useOnPreventRemove';\n/**\n * Hook to handle actions for a navigator, including state updates and bubbling.\n *\n * Bubbling an action is achieved in 2 ways:\n * 1. To bubble action to parent, we expose the action handler in context and then access the parent context\n * 2. To bubble action to child, child adds event listeners subscribing to actions from parent\n *\n * When the action handler handles as action, it returns `true`, otherwise `false`.\n */\n\nexport default function useOnAction({\n  router,\n  getState,\n  setState,\n  key,\n  actionListeners,\n  beforeRemoveListeners,\n  routerConfigOptions,\n  emitter\n}) {\n  const _React$useContext = React.useContext(NavigationBuilderContext),\n        onActionParent = _React$useContext.onAction,\n        onRouteFocusParent = _React$useContext.onRouteFocus,\n        addListenerParent = _React$useContext.addListener,\n        onDispatchAction = _React$useContext.onDispatchAction;\n\n  const routerConfigOptionsRef = React.useRef(routerConfigOptions);\n  React.useEffect(() => {\n    routerConfigOptionsRef.current = routerConfigOptions;\n  });\n  const onAction = React.useCallback((action, visitedNavigators = new Set()) => {\n    const state = getState(); // Since actions can bubble both up and down, they could come to the same navigator again\n    // We keep track of navigators which have already tried to handle the action and return if it's already visited\n\n    if (visitedNavigators.has(state.key)) {\n      return false;\n    }\n\n    visitedNavigators.add(state.key);\n\n    if (typeof action.target !== 'string' || action.target === state.key) {\n      let result = router.getStateForAction(state, action, routerConfigOptionsRef.current); // If a target is specified and set to current navigator, the action shouldn't bubble\n      // So instead of `null`, we use the state object for such cases to signal that action was handled\n\n      result = result === null && action.target === state.key ? state : result;\n\n      if (result !== null) {\n        onDispatchAction(action, state === result);\n\n        if (state !== result) {\n          const nextRouteKeys = result.routes.map(route => route.key);\n          const removedRoutes = state.routes.filter(route => !nextRouteKeys.includes(route.key));\n          const isPrevented = shouldPreventRemove(emitter, beforeRemoveListeners, removedRoutes, action);\n\n          if (isPrevented) {\n            return true;\n          }\n\n          setState(result);\n        }\n\n        if (onRouteFocusParent !== undefined) {\n          // Some actions such as `NAVIGATE` also want to bring the navigated route to focus in the whole tree\n          // This means we need to focus all of the parent navigators of this navigator as well\n          const shouldFocus = router.shouldActionChangeFocus(action);\n\n          if (shouldFocus && key !== undefined) {\n            onRouteFocusParent(key);\n          }\n        }\n\n        return true;\n      }\n    }\n\n    if (onActionParent !== undefined) {\n      // Bubble action to the parent if the current navigator didn't handle it\n      if (onActionParent(action, visitedNavigators)) {\n        return true;\n      }\n    } // If the action wasn't handled by current navigator or a parent navigator, let children handle it\n\n\n    for (let i = actionListeners.length - 1; i >= 0; i--) {\n      const listener = actionListeners[i];\n\n      if (listener(action, visitedNavigators)) {\n        return true;\n      }\n    }\n\n    return false;\n  }, [actionListeners, beforeRemoveListeners, emitter, getState, key, onActionParent, onDispatchAction, onRouteFocusParent, router, setState]);\n  useOnPreventRemove({\n    getState,\n    emitter,\n    beforeRemoveListeners\n  });\n  React.useEffect(() => addListenerParent === null || addListenerParent === void 0 ? void 0 : addListenerParent('action', onAction), [addListenerParent, onAction]);\n  return onAction;\n}","map":null,"metadata":{},"sourceType":"module"}